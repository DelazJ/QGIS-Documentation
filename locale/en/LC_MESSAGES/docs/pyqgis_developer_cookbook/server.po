# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation 3.34\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-15 11:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../<rst_prolog>:5
msgid ""
"Translation is a community effort :ref:`you can join "
"<translation_guidelines>`. This page is currently translated at "
"|translation progress|."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:29
msgid "QGIS Server and Python"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:38
msgid "Introduction"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:40
msgid "To learn more about QGIS Server, read the :ref:`QGIS-Server-manual`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:42
msgid "QGIS Server is three different things:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:44
msgid ""
"QGIS Server library: a library that provides an API for creating OGC web "
"services"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:45
msgid ""
"QGIS Server FCGI: a FCGI binary application :file:`qgis_mapserv.fcgi` "
"that together with a web server implements a set of OGC services (WMS, "
"WFS, WCS etc.) and OGC APIs (WFS3/OAPIF)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:48
msgid ""
"QGIS Development Server: a development server binary application "
":file:`qgis_mapserver` that implements a set of OGC services (WMS, WFS, "
"WCS etc.) and OGC APIs (WFS3/OAPIF)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:51
msgid ""
"This chapter of the cookbook focuses on the first topic and by explaining"
" the usage of QGIS Server API it shows how it is possible to use Python "
"to extend, enhance or customize the server behavior or how to use the "
"QGIS Server API to embed QGIS server into another application."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:55
msgid ""
"There are a few different ways you can alter the behavior of QGIS Server "
"or extend its capabilities to offer new custom services or APIs, these "
"are the main scenarios you may face:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:59
msgid "EMBEDDING |rarr| Use QGIS Server API from another Python application"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:60
msgid "STANDALONE |rarr| Run QGIS Server as a standalone WSGI/HTTP service"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:61
msgid "FILTERS |rarr| Enhance/Customize QGIS Server with filter plugins"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:62
msgid "SERVICES |rarr| Add a new *SERVICE*"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:63
msgid "OGC APIs |rarr| Add a new *OGC API*"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:65
msgid ""
"Embedding and standalone applications require using the QGIS Server "
"Python API directly from another Python script or application. The "
"remaining options are better suited for when you want to add custom "
"features to a standard QGIS Server binary application (FCGI or "
"development server): in this case you'll need to write a Python plugin "
"for the server application and register your custom filters, services or "
"APIs."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:72
msgid "Server API basics"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:74
msgid "The fundamental classes involved in a typical QGIS Server application are:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:76
msgid ""
":class:`QgsServer <qgis.server.QgsServer>` the server instance (typically"
" a single instance for the whole application life)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:78
msgid ""
":class:`QgsServerRequest <qgis.server.QgsServerRequest>` the request "
"object (typically recreated on each request)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:80
msgid ""
":meth:`QgsServer.handleRequest(request, response) "
"<qgis.server.QgsServer.handleRequest>` processes the request and "
"populates the response"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:83
msgid ""
"The QGIS Server FCGI or development server workflow can be summarized as "
"follows:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:97
msgid ""
"Inside the :meth:`QgsServer.handleRequest(request, response) "
"<qgis.server.QgsServer.handleRequest>` method the filter plugins "
"callbacks are called and :class:`QgsServerRequest "
"<qgis.server.QgsServerRequest>` and :class:`QgsServerResponse "
"<qgis.server.QgsServerResponse>` are made available to the plugins "
"through the :class:`QgsServerInterface <qgis.server.QgsServerInterface>` "
"class."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:104
msgid ""
"QGIS server classes are not thread safe, you should always use a "
"multiprocessing model or containers when building scalable applications "
"based on QGIS Server API."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:108
msgid "Standalone or embedding"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:110
msgid ""
"For standalone server applications or embedding, you will need to use the"
" above mentioned server classes directly, wrapping them up into a web "
"server implementation that manages all the HTTP protocol interactions "
"with the client."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:115
msgid ""
"A minimal example of the QGIS Server API usage (without the HTTP part) "
"follows:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:147
msgid ""
"Here is a complete standalone application example developed for the "
"continuous integrations testing on QGIS source code repository, it "
"showcases a wide set of different plugin filters and authentication "
"schemes (not mean for production because they were developed for testing "
"purposes only but still interesting for learning): "
":source:`qgis_wrapped_server.py "
"<tests/src/python/qgis_wrapped_server.py>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:154
msgid "Server plugins"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:156
msgid ""
"Server python plugins are loaded once when the QGIS Server application "
"starts and can be used to register filters, services or APIs."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:159
msgid ""
"The structure of a server plugin is very similar to their desktop "
"counterpart, a :class:`QgsServerInterface "
"<qgis.server.QgsServerInterface>` object is made available to the plugins"
" and the plugins can register one or more custom filters, services or "
"APIs to the corresponding registry by using one of the methods exposed by"
" the server interface."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:165
msgid "Server filter plugins"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:167
msgid ""
"Filters come in three different flavors and they can be instanciated by "
"subclassing one of the classes below and by calling the corresponding "
"method of :class:`QgsServerInterface <qgis.server.QgsServerInterface>`:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:174
msgid "Filter Type"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:175
msgid "Base Class"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:176
msgid "QgsServerInterface registration"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:177
msgid "I/O"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:178
msgid ":class:`QgsServerFilter <qgis.server.QgsServerFilter>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:179
msgid ":meth:`registerFilter() <qgis.server.QgsServerInterface.registerFilter>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:180
msgid "Access Control"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:181
msgid ":class:`QgsAccessControlFilter <qgis.server.QgsAccessControlFilter>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:182
msgid ""
":meth:`registerAccessControl() "
"<qgis.server.QgsServerInterface.registerAccessControl>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:183
msgid "Cache"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:184
msgid ":class:`QgsServerCacheFilter <qgis.server.QgsServerCacheFilter>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:185
msgid ""
":meth:`registerServerCache() "
"<qgis.server.QgsServerInterface.registerServerCache>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:188
msgid "I/O filters"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:190
msgid ""
"I/O filters can modify the server input and output (the request and the "
"response) of the core services (WMS, WFS etc.) allowing to do any kind of"
" manipulation of the services workflow. It is possible for example to "
"restrict the access to selected layers, to inject an XSL stylesheet to "
"the XML response, to add a watermark to a generated WMS image and so on."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:196
msgid ""
"From this point, you might find useful a quick look to the "
":pyqgis:`server plugins API docs <server>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:199
msgid "Each filter should implement at least one of three callbacks:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:201
#: ../../docs/pyqgis_developer_cookbook/server.rst:372
msgid ":meth:`onRequestReady() <qgis.server.QgsServerFilter.onRequestReady>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:202
#: ../../docs/pyqgis_developer_cookbook/server.rst:373
msgid ""
":meth:`onResponseComplete() "
"<qgis.server.QgsServerFilter.onResponseComplete>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:203
#: ../../docs/pyqgis_developer_cookbook/server.rst:374
msgid ":meth:`onSendResponse() <qgis.server.QgsServerFilter.onSendResponse>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:205
msgid ""
"All filters have access to the request/response object "
"(:class:`QgsRequestHandler <qgis.server.QgsRequestHandler>`) and can "
"manipulate all its properties (input/output) and raise exceptions (while "
"in a quite particular way as we’ll see below)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:210
msgid ""
"All these methods return a boolean value indicating if the call should be"
" propagated to the subsequent filters. If one of these method returns "
":const:`False` then the chain stop, otherwise the call will propagate to "
"the next filter."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:214
msgid ""
"Here is the pseudo code showing how the server handles a typical request "
"and when the filter’s callbacks are called:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:234
msgid "The following paragraphs describe the available callbacks in details."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:237
msgid "onRequestReady"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:239
msgid ""
"This is called when the request is ready: incoming URL and data have been"
" parsed and before entering the core services (WMS, WFS etc.) switch, "
"this is the point where you can manipulate the input and perform actions "
"like:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:243
msgid "authentication/authorization"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:244
msgid "redirects"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:245
msgid "add/remove certain parameters (typenames for example)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:246
msgid "raise exceptions"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:248
msgid ""
"You could even substitute a core service completely by changing "
"**SERVICE** parameter and hence bypassing the core service completely "
"(not that this make much sense though)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:253
msgid "onSendResponse"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:255
msgid ""
"This is called whenever any partial output is flushed from response "
"buffer (i.e to **FCGI** ``stdout`` if the fcgi server is used) and from "
"there, to the client. This occurs when huge content is streamed (like WFS"
" GetFeature). In this case :meth:`onSendResponse() "
"<qgis.server.QgsServerFilter.onSendResponse>` may be called multiple "
"times."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:260
msgid ""
"Note that if the response is not streamed, then :meth:`onSendResponse() "
"<qgis.server.QgsServerFilter.onSendResponse>` will not be called at all."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:262
msgid ""
"In all case, the last (or unique) chunk will be sent to client after a "
"call to :meth:`onResponseComplete() "
"<qgis.server.QgsServerFilter.onResponseComplete>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:265
msgid ""
"Returning :const:`False` will prevent flushing of data to the client. "
"This is desirable when a plugin wants to collect all chunks from a "
"response and examine or change the response in "
":meth:`onResponseComplete() "
"<qgis.server.QgsServerFilter.onResponseComplete>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:271
msgid "onResponseComplete"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:273
msgid ""
"This is called once when core services (if hit) finish their process and "
"the request is ready to be sent to the client. As discussed above, this "
"method will be called before the last (or unique) chunk of data is sent "
"to the client. For streaming services, multiple calls to "
":meth:`onSendResponse() <qgis.server.QgsServerFilter.onSendResponse>` "
"might have been called."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:279
msgid ""
":meth:`onResponseComplete() "
"<qgis.server.QgsServerFilter.onResponseComplete>` is the ideal place to "
"provide new services implementation (WPS or custom services) and to "
"perform direct manipulation of the output coming from core services (for "
"example to add a watermark upon a WMS image)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:284
msgid ""
"Note that returning :const:`False` will prevent the next plugins to "
"execute :meth:`onResponseComplete() "
"<qgis.server.QgsServerFilter.onResponseComplete>` but, in any case, "
"prevent response to be sent to the client."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:290
msgid "Raising exceptions from a plugin"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:292
msgid ""
"Some work has still to be done on this topic: the current implementation "
"can distinguish between handled and unhandled exceptions by setting a "
":class:`QgsRequestHandler <qgis.server.QgsRequestHandler>` property to an"
" instance of QgsMapServiceException, this way the main C++ code can catch"
" handled python exceptions and ignore unhandled exceptions (or better: "
"log them)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:299
msgid ""
"This approach basically works but it is not very \"pythonic\": a better "
"approach would be to raise exceptions from python code and see them "
"bubbling up into C++ loop for being handled there."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:306
msgid "Writing a server plugin"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:308
msgid ""
"A server plugin is a standard QGIS Python plugin as described in "
":ref:`developing_plugins`, that just provides an additional (or "
"alternative) interface: a typical QGIS desktop plugin has access to QGIS "
"application through the :class:`QgisInterface <qgis.gui.QgisInterface>` "
"instance, a server plugin has only access to a :class:`QgsServerInterface"
" <qgis.server.QgsServerInterface>` when it is executed within the QGIS "
"Server application context."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:315
msgid ""
"To make QGIS Server aware that a plugin has a server interface, a special"
" metadata entry is needed (in :file:`metadata.txt`)::"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:322
msgid ""
"Only plugins that have the ``server=True`` metadata set will be loaded "
"and executed by QGIS Server."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:324
msgid ""
"The `qgis3-server-vagrant <https://github.com/elpaso/qgis3-server-"
"vagrant/tree/master/resources/web/plugins>`_ example plugin discussed "
"here (with many more) is available on github, a few server plugins are "
"also published in the official `QGIS plugins repository "
"<https://plugins.qgis.org/plugins/server>`_."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:329
#: ../../docs/pyqgis_developer_cookbook/server.rst:554
msgid "Plugin files"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:331
msgid "Here's the directory structure of our example server plugin."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:344
#: ../../docs/pyqgis_developer_cookbook/server.rst:568
msgid "__init__.py"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:346
msgid ""
"This file is required by Python's import system. Also, QGIS Server "
"requires that this file contains a :func:`serverClassFactory()` function,"
" which is called when the plugin gets loaded into QGIS Server when the "
"server starts. It receives reference to instance of "
":class:`QgsServerInterface <qgis.server.QgsServerInterface>` and must "
"return instance of your plugin's class. This is how the example plugin "
":file:`__init__.py` looks like:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:361
msgid "HelloServer.py"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:363
msgid ""
"This is where the magic happens and this is how magic looks like: (e.g. "
":file:`HelloServer.py`)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:366
msgid ""
"A server plugin typically consists in one or more callbacks packed into "
"instances of a :class:`QgsServerFilter <qgis.server.QgsServerFilter>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:369
msgid ""
"Each :class:`QgsServerFilter <qgis.server.QgsServerFilter>` implements "
"one or more of the following callbacks:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:376
msgid ""
"The following example implements a minimal filter which prints "
"*HelloServer!* in case the **SERVICE** parameter equals to “HELLO”:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:405
msgid ""
"The filters must be registered into the **serverIface** as in the "
"following example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:413
msgid ""
"The second parameter of :meth:`registerFilter() "
"<qgis.server.QgsServerInterface.registerFilter>` sets a priority which "
"defines the order for the callbacks with the same name (the lower "
"priority is invoked first)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:418
msgid ""
"By using the three callbacks, plugins can manipulate the input and/or the"
" output of the server in many different ways. In every moment, the plugin"
" instance has access to the :class:`QgsRequestHandler "
"<qgis.server.QgsRequestHandler>` through the :class:`QgsServerInterface "
"<qgis.server.QgsServerInterface>`. The :class:`QgsRequestHandler "
"<qgis.server.QgsRequestHandler>` class has plenty of methods that can be "
"used to alter the input parameters before entering the core processing of"
" the server (by using :func:`requestReady`) or after the request has been"
" processed by the core services (by using :func:`sendResponse`)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:428
msgid "The following examples cover some common use cases:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:431
msgid "Modifying the input"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:433
msgid ""
"The example plugin contains a test example that changes input parameters "
"coming from the query string, in this example a new parameter is injected"
" into the (already parsed) ``parameterMap``, this parameter is then "
"visible by core services (WMS etc.), at the end of core services "
"processing we check that the parameter is still there:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:461
msgid "This is an extract of what you see in the log file:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:473
msgid ""
"On the highlighted line the “SUCCESS” string indicates that the plugin "
"passed the test."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:475
msgid ""
"The same technique can be exploited to use a custom service instead of a "
"core one: you could for example skip a **WFS** **SERVICE** request or any"
" other core request just by changing the **SERVICE** parameter to "
"something different and the core service will be skipped. Then you can "
"inject your custom results into the output and send them to the client "
"(this is explained below)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:483
msgid ""
"If you really want to implement a custom service it is recommended to "
"subclass :class:`QgsService <qgis.server.QgsService>` and register your "
"service on :meth:`registerFilter() "
"<qgis.server.QgsServerInterface.serviceRegistry>` by calling its "
":meth:`registerService(service) "
"<qgis.server.QgsServiceRegistry.registerService>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:489
msgid "Modifying or replacing the output"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:491
msgid ""
"The watermark filter example shows how to replace the WMS output with a "
"new image obtained by adding a watermark image on the top of the WMS "
"image generated by the WMS core service:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:531
msgid ""
"In this example the **SERVICE** parameter value is checked and if the "
"incoming request is a **WMS** **GETMAP** and no exceptions have been set "
"by a previously executed plugin or by the core service (WMS in this "
"case), the WMS generated image is retrieved from the output buffer and "
"the watermark image is added. The final step is to clear the output "
"buffer and replace it with the newly generated image. Please note that in"
" a real-world situation we should also check for the requested image type"
" instead of supporting PNG or JPG only."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:540
msgid "Access control filters"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:542
msgid ""
"Access control filters gives the developer a fine-grained control over "
"which layers, features and attributes can be accessed, the following "
"callbacks can be implemented in an access control filter:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:546
msgid ""
":meth:`layerFilterExpression(layer) "
"<qgis.server.QgsAccessControlFilter.layerFilterExpression>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:547
msgid ""
":meth:`layerFilterSubsetString(layer) "
"<qgis.server.QgsAccessControlFilter.layerFilterSubsetString>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:548
msgid ""
":meth:`layerPermissions(layer) "
"<qgis.server.QgsAccessControlFilter.layerPermissions>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:549
msgid ""
":meth:`authorizedLayerAttributes(layer, attributes) "
"<qgis.server.QgsAccessControlFilter.authorizedLayerAttributes>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:550
msgid ""
":meth:`allowToEdit(layer, feature) "
"<qgis.server.QgsAccessControlFilter.allowToEdit>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:551
msgid ":meth:`cacheKey() <qgis.server.QgsAccessControlFilter.cacheKey>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:556
msgid "Here's the directory structure of our example plugin:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:570
msgid ""
"This file is required by Python's import system. As for all QGIS server "
"plugins, this file contains a :func:`serverClassFactory()` function, "
"which is called when the plugin gets loaded into QGIS Server at startup. "
"It receives a reference to an instance of :class:`QgsServerInterface "
"<qgis.server.QgsServerInterface>` and must return an instance of your "
"plugin's class. This is how the example plugin :file:`__init__.py` looks "
"like:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:587
msgid "AccessControl.py"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:626
msgid "This example gives a full access for everybody."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:628
msgid "It's the role of the plugin to know who is logged on."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:630
msgid ""
"On all those methods we have the layer on argument to be able to "
"customise the restriction per layer."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:635
msgid "layerFilterExpression"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:637
msgid "Used to add an Expression to limit the results."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:639
#: ../../docs/pyqgis_developer_cookbook/server.rst:652
msgid ""
"For example, to limit to features where the attribute ``role`` is equal "
"to ``user``."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:648
msgid "layerFilterSubsetString"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:650
msgid ""
"Same than the previous but use the ``SubsetString`` (executed in the "
"database)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:661
msgid "layerPermissions"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:663
msgid "Limit the access to the layer."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:665
msgid ""
"Return an object of type :meth:`LayerPermissions() "
"<qgis.server.QgsAccessControlFilter.layerPermissions>`, which has the "
"properties:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:668
msgid ""
":attr:`canRead "
"<qgis.server.QgsAccessControlFilter.LayerPermissions.canRead>` to see it "
"in the ``GetCapabilities`` and have read access."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:670
msgid ""
":attr:`canInsert "
"<qgis.server.QgsAccessControlFilter.LayerPermissions.canInsert>` to be "
"able to insert a new feature."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:672
msgid ""
":attr:`canUpdate "
"<qgis.server.QgsAccessControlFilter.LayerPermissions.canUpdate>` to be "
"able to update a feature."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:674
msgid ""
":attr:`canDelete "
"<qgis.server.QgsAccessControlFilter.LayerPermissions.canDelete>` to be "
"able to delete a feature."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:677
msgid "For example, to limit everything on read only access:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:689
msgid "authorizedLayerAttributes"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:691
msgid "Used to limit the visibility of a specific subset of attribute."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:693
msgid "The argument attribute return the current set of visible attributes."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:695
msgid "For example, to hide the ``role`` attribute:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:704
msgid "allowToEdit"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:706
msgid "This is used to limit the editing on a subset of features."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:708
msgid "It is used in the ``WFS-Transaction`` protocol."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:710
msgid ""
"For example, to be able to edit only feature that has the attribute "
"``role`` with the value ``user``:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:720
msgid "cacheKey"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:722
msgid ""
"QGIS Server maintains a cache of the capabilities then to have a cache "
"per role you can return the role in this method. Or return ``None`` to "
"completely disable the cache."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:728
msgid "Custom services"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:730
msgid ""
"In QGIS Server, core services such as WMS, WFS and WCS are implemented as"
" subclasses of :class:`QgsService <qgis.server.QgsService>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:733
msgid ""
"To implement a new service that will be executed when the query string "
"parameter ``SERVICE`` matches the service name, you can implement your "
"own :class:`QgsService <qgis.server.QgsService>` and register your "
"service on the :meth:`serviceRegistry() "
"<qgis.server.QgsServerInterface.serviceRegistry>` by calling its "
":meth:`registerService(service) "
"<qgis.server.QgsServiceRegistry.registerService>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:738
msgid "Here is an example of a custom service named ``CUSTOM``:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:769
msgid "Custom APIs"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:771
msgid ""
"In QGIS Server, core OGC APIs such OAPIF (aka WFS3) are implemented as "
"collections of :class:`QgsServerOgcApiHandler "
"<qgis.server.QgsServerOgcApiHandler>` subclasses that are registered to "
"an instance of :class:`QgsServerOgcApi <qgis.server.QgsServerOgcApi>` (or"
" it's parent class :class:`QgsServerApi <qgis.server.QgsServerApi>`)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:776
msgid ""
"To implement a new API that will be executed when the url path matches a "
"certain URL, you can implement your own :class:`QgsServerOgcApiHandler "
"<qgis.server.QgsServerOgcApiHandler>` instances, add them to an "
":class:`QgsServerOgcApi <qgis.server.QgsServerOgcApi>` and register the "
"API on the :meth:`serviceRegistry() "
"<qgis.server.QgsServerInterface.serviceRegistry>` by calling its "
":meth:`registerApi(api) <qgis.server.QgsServiceRegistry.registerApi>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:782
msgid ""
"Here is an example of a custom API that will be executed when the URL "
"contains ``/customapi``:"
msgstr ""

