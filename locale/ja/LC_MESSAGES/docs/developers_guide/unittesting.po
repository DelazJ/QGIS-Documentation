# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
# 
# Translators:
# Harrissou Sant-anna, 2024
# Transifex Bot <>, 2024
# tomoya miyoshi, 2024
# fairtommy <fairtommy@gmail.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation 3.34\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-15 11:22+0000\n"
"PO-Revision-Date: 2024-03-02 11:58+0000\n"
"Last-Translator: fairtommy <fairtommy@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/qgis/teams/6144/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../<rst_prolog>:5
msgid ""
"Translation is a community effort :ref:`you can join "
"<translation_guidelines>`. This page is currently translated at |translation"
" progress|."
msgstr ""
"翻訳は :ref:`あなたが参加できる <translation_guidelines>`  コミュニティの取り組みです。このページは現在 "
"|translation progress| 翻訳されています。"

#: ../../docs/developers_guide/unittesting.rst:6
msgid "Unit Testing"
msgstr "ユニットテスト"

#: ../../docs/developers_guide/unittesting.rst:11
msgid ""
"As of November 2007 we require all new features going into master to be "
"accompanied with a unit test. Initially we have limited this requirement to "
"qgis_core, and we will extend this requirement to other parts of the code "
"base once people are familiar with the procedures for unit testing explained"
" in the sections that follow."
msgstr ""
"2007年11月の時点で、私たちはマスターに入るすべての新機能は、ユニットテストを伴うことを要求しています。当初は私たちはこの要件はqgis_coreに制限してきましたが、皆様が次のセクションで説明するユニットテストのための手続きに精通した後は、この要件をコードベースの他の部分に拡張するつもりです。"

#: ../../docs/developers_guide/unittesting.rst:19
msgid "The QGIS testing framework - an overview"
msgstr "QGISのテストフレームワーク - 概要"

#: ../../docs/developers_guide/unittesting.rst:21
msgid ""
"Unit testing is carried out using a combination of QTestLib (the Qt testing "
"library) and CTest (a framework for compiling and running tests as part of "
"the CMake build process). Lets take an overview of the process before we "
"delve into the details:"
msgstr ""
"ユニットテストは、QTestLib（Qtのテストライブラリ）とCTest（CMakeのビルドプロセスの一部としてテストをコンパイルして実行するためのフレームワーク）の組み合わせを使って行われます。詳細に入る前に、プロセスの概要を説明しましょう:"

#: ../../docs/developers_guide/unittesting.rst:26
msgid ""
"There is some code you want to test, e.g. a class or function. Extreme "
"programming advocates suggest that the code should not even be written yet "
"when you start building your tests, and then as you implement your code you "
"can immediately validate each new functional part you add with your test. In"
" practice you will probably need to write tests for pre-existing code in "
"QGIS since we are starting with a testing framework well after much "
"application logic has already been implemented."
msgstr ""
"テストしたいコード、例えばクラスや関数があるとします。エクストリーム・プログラミングの提唱者たちは、コードは、テストを作る前に書いてはならない、そうすればコードを実装したときに、追加した新しい機能の箇所をテストを使ってすぐに検証することができる、と提唱しています。実際には、多くのアプリケーションロジックが実装された後にテストフレームワークを開始するため、QGISの既存のコードに対してテストを記述する必要があるでしょう。"

#: ../../docs/developers_guide/unittesting.rst:34
msgid ""
"You create a unit test. This happens under ``<QGIS Source "
"Dir>/tests/src/core`` in the case of the core lib. The test is basically a "
"client that creates an instance of a class and calls some methods on that "
"class. It will check the return from each method to make sure it matches the"
" expected value. If any one of the calls fails, the unit will fail."
msgstr ""
"ユニットテストを作成します。これはcore libの場合 ``<QGIS Source Dir>/tests/src/core`` "
"の下で起こります。テストは、基本的には、クラスのインスタンスを作成し、そのクラスにいくつかのメソッドを呼び出すクライアントです。それは各メソッドからの戻りをチェックし、期待値と一致することを確認します。呼び出しのいずれかに障害が発生した場合、そのユニットは失敗します。"

#: ../../docs/developers_guide/unittesting.rst:40
msgid ""
"You include QtTestLib macros in your test class. This macro is processed by "
"the Qt meta object compiler (moc) and expands your test class into a "
"runnable application."
msgstr ""
"テストクラスにQtTestLibマクロを含めます。このマクロは、Qtのメタオブジェクトコンパイラ（MOC）によって処理され、実行可能なアプリケーションにテストクラスを拡張します。"

#: ../../docs/developers_guide/unittesting.rst:44
msgid ""
"You add a section to the CMakeLists.txt in your tests directory that will "
"build your test."
msgstr "テストを構築するtestsディレクトリにCMakeLists.txtにセクションを追加します。"

#: ../../docs/developers_guide/unittesting.rst:47
msgid ""
"You ensure you have ``ENABLE_TESTING`` enabled in ccmake / cmakesetup. This "
"will ensure your tests actually get compiled when you type make."
msgstr ""
"``ENABLE_TESTING`` "
"がccmake/cmakesetupで有効になっていることを確認します。これは、makeと入力すると、テストが実際にコンパイルされることを保証します。"

#: ../../docs/developers_guide/unittesting.rst:50
msgid ""
"You optionally add test data to ``<QGIS Source Dir>/tests/testdata`` if your"
" test is data driven (e.g. needs to load a shapefile). These test data "
"should be as small as possible and wherever possible you should use the "
"existing datasets already there. Your tests should never modify this data in"
" situ, but rather make a temporary copy somewhere if needed."
msgstr ""
"テストがデータ駆動型の場合（シェープファイルを読み込む必要があるなど）、オプションで ``<QGIS Source Dir> "
"/tests/testdata`` "
"にテストデータを追加することもできます。これらのテストデータはできるだけ小さくし、可能な限り既存のデータセットを使用します。テストは決してその場でこのデータを変更してはならず、必要な場合は一時的なコピーをどこかに作るべきです。"

#: ../../docs/developers_guide/unittesting.rst:56
msgid ""
"You compile your sources and install. Do this using normal ``make && (sudo)"
"  make install`` procedure."
msgstr ""
"ソースをコンパイルしてインストールします。これは通常の ``make && (sudo) make install`` 手順を使用して実行します。"

#: ../../docs/developers_guide/unittesting.rst:59
msgid ""
"You run your tests. This is normally done simply by doing ``make test`` "
"after the ``make install`` step, though we will explain other approaches "
"that offer more fine grained control over running tests."
msgstr ""
"テストを実行します。通常は ``make install`` の後に ``make test`` "
"を実行するだけですが、テストの実行をより細かく制御する他の方法についても説明します。"

#: ../../docs/developers_guide/unittesting.rst:64
msgid ""
"Right with that overview in mind, we will delve into a bit of detail. We've "
"already done much of the configuration for you in CMake and other places in "
"the source tree so all you need to do are the easy bits - writing unit "
"tests!"
msgstr ""
"概要を理解した上で、もう少し詳しく説明します。すでにCMakeやソースツリーの他の場所で、あなたのために多くの設定を行っているので、あなたがする必要があるのは簡単なこと、つまりユニットテストを書くことだけです！"

#: ../../docs/developers_guide/unittesting.rst:70
msgid "Creating a unit test"
msgstr "ユニットテストの作成"

#: ../../docs/developers_guide/unittesting.rst:72
msgid ""
"Creating a unit test is easy - typically you will do this by just creating a"
" single :file:`.cpp` file (no :file:`.h` file is used) and implement all "
"your test methods as private methods that return void. We'll use a simple "
"test class for ``QgsRasterLayer`` throughout the section that follows to "
"illustrate. By convention we will name our test with the same name as the "
"class they are testing but prefixed with 'Test'. So our test implementation "
"goes in a file called :file:`testqgsrasterlayer.cpp` and the class itself "
"will be ``TestQgsRasterLayer``. First we add our standard copyright banner:"
msgstr ""
"ユニットテストの作成は簡単で、通常は :file:`.cpp` ファイルを1つ作成し（ :file:`.h` "
"ファイルは使用しない）、すべてのテストメソッドを void を返す private メソッドとして実装するだけです。この後のセクションで "
"``QgsRasterLayer`` の簡単なテストクラスを使って説明します。テストの名前は、慣例として、テストするクラスと同じ名前にプレフィックス "
"'Test' を付けます。ですから、テストの実装は :file:`testqgsrasterlayer.cpp` というファイルに記述し、クラス名は "
"``TestQgsRasterLayer`` となります。最初に標準的なコピーライトのバナーを追加します："

#: ../../docs/developers_guide/unittesting.rst:98
msgid ""
"Next we start our includes needed for the tests we plan to run. There is one"
" special include all tests should have:"
msgstr "次に、実行予定のテストに必要なインクルードを開始します。すべてのテストが持つべき特別なインクルードがひとつあります："

#: ../../docs/developers_guide/unittesting.rst:105
msgid ""
"Beyond that you just continue implementing your class as per normal, pulling"
" in whatever headers you may need:"
msgstr "その他は、必要となる可能性があるヘッダは何でも引っ張って、通常通りあなたのクラスを実装し続けるだけです："

#: ../../docs/developers_guide/unittesting.rst:123
msgid ""
"Since we are combining both class declaration and implementation in a single"
" file the class declaration comes next. We start with our doxygen "
"documentation. Every test case should be properly documented. We use the "
"doxygen ingroup directive so that all the UnitTests appear as a module in "
"the generated Doxygen documentation. After that comes a short description of"
" the unit test and the class must inherit from QObject and include the "
"Q_OBJECT macro."
msgstr ""
"ここではクラス宣言と実装の両方を単一のファイルに組み合わせているので、クラス宣言が次に来ます。doxygenのドキュメントで始めます。すべてのテストケースは適切に文書化されなければなりません。すべてのユニットテストが生成されたDoxygenのドキュメントのモジュールとして表示されるように、doxygenのingroupディレクティブを使用します。その後にユニットテストの短い説明が来て、このクラスはQObjectを継承し、Q_OBJECTマクロをインクルードする必要があります。"

#: ../../docs/developers_guide/unittesting.rst:140
msgid ""
"All our test methods are implemented as private slots. The QtTest framework "
"will sequentially call each private slot method in the test class. There are"
" four 'special' methods which if implemented will be called at the start of "
"the unit test (``initTestCase``), at the end of the unit test "
"(``cleanupTestCase``). Before each test method is called, the ``init()`` "
"method will be called and after each test method is called the ``cleanup()``"
" method is called. These methods are handy in that they allow you to "
"allocate and cleanup resources prior to running each test, and the test unit"
" as a whole."
msgstr ""
"すべてのテストメソッドはプライベートスロットとして実装されています。QtTestフレームワークは、テストクラスの各プライベートスロットメソッドを順次呼び出します。もし4つの"
" '特別な' メソッドが実装されていれば、ユニットテストの開始時 (``initTestCase``) と終了時 "
"(``cleanupTestCase``) に呼び出されます。各テストメソッドが呼ばれる前に ``init()`` "
"メソッドが呼ばれ、各テストメソッドが呼ばれた後に ``cleanup()`` "
"メソッドが呼ばれます。これらのメソッドは、各テストやテストユニット全体を実行する前にリソースを割り当てたりクリーンアップしたりできるという点で便利です。"

#: ../../docs/developers_guide/unittesting.rst:161
msgid ""
"Then come your test methods, all of which should take no parameters and "
"should return void. The methods will be called in order of declaration. We "
"are implementing two methods here which illustrate two types of testing."
msgstr ""
"次にテストメソッドが来ますが、これらはすべてパラメータをとらず、voidを返します。メソッドは宣言順に呼び出される。ここでは、2種類のテストを説明する2つのメソッドを実装します。"
" "

#: ../../docs/developers_guide/unittesting.rst:165
msgid ""
"In the first case we want to generally test if the various parts of the "
"class are working, We can use a functional testing approach. Once again, "
"extreme programmers would advocate writing these tests before implementing "
"the class. Then as you work your way through your class implementation you "
"iteratively run your unit tests. More and more test functions should "
"complete successfully as your class implementation work progresses, and when"
" the whole unit test passes, your new class is done and is now complete with"
" a repeatable way to validate it."
msgstr ""
"最初のケースでは、クラスのさまざまな部分が機能しているかどうかを一般的にテストします。関数的なテスト方法のアプローチが使えます。繰り返しますが、エクストリームプログラマはクラスを実装する前にこれらのテストを書くことを推奨します。そして、クラスの実装を進めながら、ユニットテストを繰り返し実行します。クラス実装の作業が進むにつれて、より多くのテスト関数が正常に完了するはずです。そして、すべてのユニットテストがパスしたら、新しいクラスは完成し、それを検証するための再現可能な方法が完成したことになります。"
" "

#: ../../docs/developers_guide/unittesting.rst:173
msgid ""
"Typically your unit tests would only cover the public API of your class, and"
" normally you do not need to write tests for accessors and mutators. If it "
"should happen that an accessor or mutator is not working as expected you "
"would normally implement a :ref:`regression test <regression_test>` to check"
" for this."
msgstr ""
"通常、ユニットテストはクラスのパブリック API "
"のみを対象とし、accessorやmutatorのテストを書く必要はありません。もしaccessorやmutatorが期待通りに動作しないようなことがあれば、通常は"
" :ref:`regression test <regression_test>` を実装してそれをチェックします。 "

#: ../../docs/developers_guide/unittesting.rst:193
msgid "Implementing a regression test"
msgstr "回帰テストを実装する"

#: ../../docs/developers_guide/unittesting.rst:195
msgid ""
"Next we implement our regression tests. Regression tests should be "
"implemented to replicate the conditions of a particular bug. For example:"
msgstr "次に回帰テストを実装します。回帰テストは、特定のバグの状態を再現するように実装する必要があります。例えば ："

#: ../../docs/developers_guide/unittesting.rst:198
msgid ""
"We received a report by email that the cell count by rasters was off by 1, "
"throwing off all the statistics for the raster bands."
msgstr "ラスタバンドのセルカウントが1ずれたため、ラスタバンドの統計がすべて狂ってしまったという報告をメールで受け取りました。 "

#: ../../docs/developers_guide/unittesting.rst:200
msgid ""
"We opened a bug report (`ticket #832 <https://issues.qgis.org/issues/832>`_)"
msgstr "バグレポート (`ticket #832 <https://issues.qgis.org/issues/832>`_) を開きました。"

#: ../../docs/developers_guide/unittesting.rst:201
msgid ""
"We created a regression test that replicated the bug using a small test "
"dataset (a 10x10 raster)."
msgstr "小さなテストデータセット（10x10のラスター）を使ってバグを再現する回帰テストを作成しました。 "

#: ../../docs/developers_guide/unittesting.rst:203
msgid ""
"We ran the test, verifying that it did indeed fail (the cell count was 99 "
"instead of 100)."
msgstr "テストを実行し、確かに失敗することを確認しました（セルカウントは100ではなく99でした）。 "

#: ../../docs/developers_guide/unittesting.rst:205
msgid ""
"Then we went to fix the bug and reran the unit test and the regression test "
"passed. We committed the regression test along with the bug fix. Now if "
"anybody breakes this in the source code again in the future, we can "
"immediately identify that the code has regressed."
msgstr ""
"そしてバグを修正し、ユニットテストを再実行したところ、回帰テストはパスしました。バグ修正と一緒に回帰テストもコミットしました。これで、将来誰かがソースコードでこれを再び壊した場合、コードが回帰したことをすぐに特定できるようになりました。"
" "

#: ../../docs/developers_guide/unittesting.rst:210
msgid ""
"Better yet, before committing any changes in the future, running our tests "
"will ensure our changes don't have unexpected side effects - like breaking "
"existing functionality."
msgstr ""
"さらに、今後変更をコミットする前に、テストを実行することで、変更が予期せぬ副作用（既存の機能を壊すなど）をもたらさないことを確認できます。 "

#: ../../docs/developers_guide/unittesting.rst:214
msgid ""
"There is one more benefit to regression tests - they can save you time. If "
"you ever fixed a bug that involved making changes to the source, and then "
"running the application and performing a series of convoluted steps to "
"replicate the issue, it will be immediately apparent that simply "
"implementing your regression test before fixing the bug will let you "
"automate the testing for bug resolution in an efficient manner."
msgstr ""
"回帰テストへの1つの以上の利点があります - "
"それらは時間を節約できます。ソースに変更を加えてからアプリケーションを実行して問題を再現するために複雑な一連のステップを実行することに関わるバグを修正したことがあれば、バグを修正する前に回帰テストを実装するだけで、効率的な方法でバグの解決のためのテストを自動化できることがすぐに明らかになるでしょう。"

#: ../../docs/developers_guide/unittesting.rst:221
msgid ""
"To implement your regression test, you should follow the naming convention "
"of **regression<TicketID>** for your test functions. If no ticket exists for"
" the regression, you should create one first. Using this approach allows the"
" person running a failed regression test easily go and find out more "
"information."
msgstr ""
"回帰テストを実装するには、テスト関数の命名規則 **regression <TicketID>** "
"に従わなければなりません。回帰のチケットが存在しない場合、最初にチケットを作成する必要があります。このアプローチを使うことで、失敗した回帰テストを実行する人が、より多くの情報を簡単に見つけることができます。"
" "

#: ../../docs/developers_guide/unittesting.rst:240
msgid ""
"Finally in your test class declaration you can declare privately any data "
"members and helper methods your unit test may need. In our case we will "
"declare a ``QgsRasterLayer *`` which can be used by any of our test methods."
" The raster layer will be created in the ``initTestCase()`` function which "
"is run before any other tests, and then destroyed using "
"``cleanupTestCase()`` which is run after all tests. By declaring helper "
"methods (which may be called by various test functions) privately, you can "
"ensure that they won't be automatically run by the QTest executable that is "
"created when we compile our test."
msgstr ""
"最後にテストクラスの宣言で、ユニットテストが必要とするデータメンバーやヘルパーメソッドを非公開で宣言します。この例ではどのテストメソッドでも使える "
"``QgsRasterLayer *`` を宣言します。ラスタレイヤは他のテストの前に実行される ``initTestCase()`` "
"関数で作成され、全てのテストの後に実行される ``cleanupTestCase()`` "
"で破棄されます。ヘルパーメソッド（様々なテスト関数から呼び出される可能性のあるもの）をプライベートで宣言することで、 "
"テストをコンパイルしたときに作成される QTest 実行ファイルから自動的に実行されないようにすることができます。"

#: ../../docs/developers_guide/unittesting.rst:257
msgid ""
"That ends our class declaration. The implementation is simply inlined in the"
" same file lower down. First our init and cleanup functions:"
msgstr ""
"これで私たちのクラス宣言を終了します。実装は単に同じファイル中で下方にインライン化されます。まず、私たちのinitおよびcleanup関数："

#: ../../docs/developers_guide/unittesting.rst:290
msgid "The above init function illustrates a couple of interesting things."
msgstr "上記のinit関数はいくつかの興味深い物事を示しています。"

#: ../../docs/developers_guide/unittesting.rst:292
msgid ""
"We needed to manually set the QGIS application data path so that resources "
"such as :file:`srs.db` can be found properly."
msgstr ""
":file:`srs.db` などのリソースが適切に見つかるように、QGISアプリケーションのデータパスを手動で設定する必要がありました。 "

#: ../../docs/developers_guide/unittesting.rst:294
msgid ""
"Secondly, this is a data driven test so we needed to provide a way to "
"generically locate the :file:`tenbytenraster.asc` file. This was achieved by"
" using the compiler define ``TEST_DATA_PATH``. The define is created in the "
"``CMakeLists.txt`` configuration file under :file:`<QGIS Source "
"Root>/tests/CMakeLists.txt` and is available to all QGIS unit tests. If you "
"need test data for your test, commit it under :file:`<QGIS Source "
"Root>/tests/testdata`. You should only commit very small datasets here. If "
"your test needs to modify the test data, it should make a copy of it first."
msgstr ""
"次に、これはデータ駆動型のテストなので、 :file:`tenbytenraster.asc` "
"ファイルを一般的に見つける方法を提供する必要がありました。これはコンパイラ定義の ``TEST_DATA_PATH`` "
"を使うことで実現しました。この定義は :file:`<QGIS Source Root>/tests/CMakeLists.txt` にある "
"``CMakeLists.txt`` 設定ファイルに作成され、すべての QGIS ユニットテストで利用可能です。テストにテストデータが必要な場合は、 "
":file:`<QGIS Source Root>/tests/testdata` "
"の下にコミットしてください。ここにコミットすべきなのは、非常に小さなデータセットだけです。テストデータを変更する必要がある場合は、まずそのコピーを作成する必要があります。"
" "

#: ../../docs/developers_guide/unittesting.rst:304
msgid ""
"Qt also provides some other interesting mechanisms for data driven testing, "
"so if you are interested to know more on the topic, consult the Qt "
"documentation."
msgstr ""
"Qtではまた、テストをデータ駆動するためのいくつかの他の興味深いメカニズムを提供していますので、この話題に関してもっと知りたいと興味をお持ちの方は、Qtのドキュメントを参照してください。"

#: ../../docs/developers_guide/unittesting.rst:308
msgid ""
"Next lets look at our functional test. The ``isValid()`` test simply checks "
"the raster layer was correctly loaded in the initTestCase. QVERIFY is a Qt "
"macro that you can use to evaluate a test condition. There are a few other "
"use macros Qt provide for use in your tests including:"
msgstr ""
"次に機能テストを見てみましょう。``isValid()`` "
"テストは、initTestCaseでラスタレイヤが正しくロードされたかどうかをチェックします。QVERIFY は Qt "
"マクロで、テスト条件を評価するために使うことができます。Qt が提供するマクロは他にもいくつかあります： "

#: ../../docs/developers_guide/unittesting.rst:313
msgid "QCOMPARE ( *actual, expected* )"
msgstr "QCOMPARE ( *actual, expected* )"

#: ../../docs/developers_guide/unittesting.rst:314
msgid "QEXPECT_FAIL ( *dataIndex, comment, mode* )"
msgstr "QEXPECT_FAIL ( *dataIndex, comment, mode* )"

#: ../../docs/developers_guide/unittesting.rst:315
msgid "QFAIL ( *message* )"
msgstr "QFAIL ( *message* )"

#: ../../docs/developers_guide/unittesting.rst:316
msgid "QFETCH ( *type, name* )"
msgstr "QFETCH ( *type, name* )"

#: ../../docs/developers_guide/unittesting.rst:317
msgid "QSKIP ( *description, mode* )"
msgstr "QSKIP ( *description, mode* )"

#: ../../docs/developers_guide/unittesting.rst:318
msgid "QTEST ( *actual, testElement* )"
msgstr "QTEST ( *actual, testElement* )"

#: ../../docs/developers_guide/unittesting.rst:319
msgid "QTEST_APPLESS_MAIN ( *TestClass* )"
msgstr "QTEST_APPLESS_MAIN ( *TestClass* )"

#: ../../docs/developers_guide/unittesting.rst:320
msgid "QTEST_MAIN ( *TestClass* )"
msgstr "QTEST_MAIN ( *TestClass* )"

#: ../../docs/developers_guide/unittesting.rst:321
msgid "QTEST_NOOP_MAIN ()"
msgstr "QTEST_NOOP_MAIN ()"

#: ../../docs/developers_guide/unittesting.rst:322
msgid "QVERIFY2 ( *condition, message* )"
msgstr "QVERIFY2 ( *condition, message* )"

#: ../../docs/developers_guide/unittesting.rst:323
msgid "QVERIFY ( *condition* )"
msgstr "QVERIFY ( *condition* )"

#: ../../docs/developers_guide/unittesting.rst:324
msgid "QWARN ( *message* )"
msgstr "QWARN ( *message* )"

#: ../../docs/developers_guide/unittesting.rst:326
msgid ""
"Some of these macros are useful only when using the Qt framework for data "
"driven testing (see the Qt docs for more detail)."
msgstr ""
"これらのマクロの一部は（詳細はQtのドキュメントを参照してください）、テスト駆動型のデータのためのQtフレームワークを使用している場合にのみ便利です。"

#: ../../docs/developers_guide/unittesting.rst:336
msgid ""
"Normally your functional tests would cover all the range of functionality of"
" your classes public API where feasible. With our functional tests out the "
"way, we can look at our regression test example."
msgstr ""
"通常、あなたの機能テストが可能な場合、あなたのクラスのパブリックAPIのすべての機能範囲をカバーするでしょう。私たちの機能テストは out the "
"way、回帰テストの例を見ることができます。"

#: ../../docs/developers_guide/unittesting.rst:340
msgid ""
"Since the issue in bug #832 is a misreported cell count, writing our test is"
" simply a matter of using QVERIFY to check that the cell count meets the "
"expected value:"
msgstr ""
"バグ＃832での問題はセル数の誤った報告なので、私たちのテストを書くことは、単純にセル数が期待値を満たしていることをQVERIFYを使用して確認する問題です。"

#: ../../docs/developers_guide/unittesting.rst:355
msgid ""
"With all the unit test functions implemented, there's one final thing we "
"need to add to our test class:"
msgstr "すべてのユニットテスト関数を実装したところで、最後にテストクラスに追加しなければならないものがあります： "

#: ../../docs/developers_guide/unittesting.rst:363
msgid ""
"The purpose of these two lines is to signal to Qt's moc that this is a "
"QtTest (it will generate a main method that in turn calls each test "
"function. The last line is the include for the MOC generated sources. You "
"should replace ``testqgsrasterlayer`` with the name of your class in lower "
"case."
msgstr ""
"この2行の目的は、QtのmocにこれがQtTestであることを知らせることです（mainメソッドを生成し、それが順番に各テスト関数を呼び出します）。最後の行はMOCが生成するソースのインクルードです。``testqgsrasterlayer``"
" を小文字のクラス名に置き換えてください。 "

#: ../../docs/developers_guide/unittesting.rst:369
msgid "Comparing images for rendering tests"
msgstr "レンダリングテスト用に画像を比較する"

#: ../../docs/developers_guide/unittesting.rst:371
msgid ""
"Rendering images on different environments can produce subtle differences "
"due to platform-specific implementations (e.g. different font rendering and "
"antialiasing algorithms), to the fonts available on the system and for other"
" obscure reasons."
msgstr ""
"異なる環境で画像をレンダリングすると、プラットフォーム固有の実装（フォントレンダリングやアンチエイリアシングアルゴリズムの違いなど）や、システムで利用可能なフォント、その他の不明瞭な理由により、微妙な違いが生じることがあります。"
" "

#: ../../docs/developers_guide/unittesting.rst:375
msgid ""
"When a rendering test runs on Travis and fails, look for the dash link at "
"the very bottom of the Travis log. This link will take you to a cdash page "
"where you can see the rendered vs expected images, along with a "
"\"difference\" image which highlights in red any pixels which did not match "
"the reference image."
msgstr ""
"Travis でレンダリングテストを実行して失敗した場合、Travis ログの一番下にある dash リンクを探します。このリンクから cdash "
"ページに移動し、レンダリングされた画像と期待される画像の比較や、参照画像と一致しなかったピクセルを赤くハイライトする「差分」画像を見ることができます。 "

#: ../../docs/developers_guide/unittesting.rst:380
msgid ""
"The QGIS unit test system has support for adding \"mask\" images, which are "
"used to indicate when a rendered image may differ from the reference image. "
"A mask image is an image (with the same name as the reference image, but "
"including a **_mask.png** suffix), and should be the same dimensions as the "
"reference image. In a mask image the pixel values indicate how much that "
"individual pixel can differ from the reference image, so a black pixel "
"indicates that the pixel in the rendered image must exactly match the same "
"pixel in the reference image. A pixel with RGB 2, 2, 2 means that the "
"rendered image can vary by up to 2 in its RGB values from the reference "
"image, and a fully white pixel (255, 255, 255) means that the pixel is "
"effectively ignored when comparing the expected and rendered images."
msgstr ""
"QGISユニットテストシステムは、レンダリング画像が参照画像と異なる可能性がある場合に使用される「マスク」画像の追加をサポートしています。マスク画像は画像（参照画像と同じ名前ですが、**_mask.png**という接尾辞が付きます）で、参照画像と同じ寸法である必要があります。マスク画像のピクセル値は、個々のピクセルが参照画像とどの程度異なってもよいかを示します。したがって、黒いピクセルは、レンダリング画像のピクセルが参照画像の同じピクセルと完全に一致しなければならないことを示します。RGB"
" 2, 2, 2のピクセルは、レンダリング画像が参照画像とRGB値で最大2まで異なる可能性があることを意味し、完全な白ピクセル（255, 255, "
"255）は、期待画像とレンダリング画像を比較する際に、そのピクセルが事実上無視されることを意味します。 "

#: ../../docs/developers_guide/unittesting.rst:392
msgid ""
"A utility script to generate mask images is available as "
"``scripts/generate_test_mask_image.py``. This script is used by passing it "
"the path of a reference image (e.g. "
"``tests/testdata/control_images/annotations/expected_annotation_fillstyle/expected_annotation_fillstyle.png``)"
" and the path to your rendered image."
msgstr ""
"マスク画像を生成するユーティリティスクリプトが ``scripts/generate_test_mask_image.py`` "
"として用意されています。このスクリプトは参照画像のパス（例えば "
"``tests/testdata/control_images/annotations/expected_annotation_fillstyle/expected_annotation_fillstyle.png``）とレンダリング画像のパスを渡して使用します。"
" "

#: ../../docs/developers_guide/unittesting.rst:397
msgid "E.g."
msgstr "例"

#: ../../docs/developers_guide/unittesting.rst:403
msgid ""
"You can shortcut the path to the reference image by passing a partial part "
"of the test name instead, e.g."
msgstr "代わりにテスト名の一部を渡すことで、参照画像へのパスをショートカットすることができます。例"

#: ../../docs/developers_guide/unittesting.rst:410
msgid ""
"(This shortcut only works if a single matching reference image is found. If "
"multiple matches are found you will need to provide the full path to the "
"reference image.)"
msgstr ""
"（このショートカットは、一致する参照画像が1つだけ見つかった場合にのみ機能します。一致する画像が複数見つかった場合は、参照画像へのフルパスを入力する必要があります。）"

#: ../../docs/developers_guide/unittesting.rst:414
msgid ""
"The script also accepts http urls for the rendered image, so you can "
"directly copy a rendered image url from the cdash results page and pass it "
"to the script."
msgstr ""
"スクリプトはレンダリング画像のhttp "
"urlも受け付けるので、cdashの結果ページからレンダリング画像のurlを直接コピーしてスクリプトに渡すことができます。 "

#: ../../docs/developers_guide/unittesting.rst:417
msgid ""
"Be careful when generating mask images - you should always view the "
"generated mask image and review any white areas in the image. Since these "
"pixels are ignored, make sure that these white images do not cover any "
"important portions of the reference image -- otherwise your unit test will "
"be meaningless!"
msgstr ""
"マスク画像を生成するときには注意が必要です。生成されたマスク画像を見て、画像内の白い部分を常に確認する必要があります。これらのピクセルは無視されるので、これらの白いイメージが参照イメージの重要な部分をカバーしていないことを確認してください。そうでなければ、ユニットテストは無意味なものになってしまいます！"
" "

#: ../../docs/developers_guide/unittesting.rst:422
msgid ""
"Similarly, you can manually \"white out\" portions of the mask if you "
"deliberately want to exclude them from the test. This can be useful e.g. for"
" tests which mix symbol and text rendering (such as legend tests), where the"
" unit test is not designed to test the rendered text and you don't want the "
"test to be subject to cross-platform text rendering differences."
msgstr ""
"同様に、意図的にテストから除外したい場合は、マスクの一部を手動で「ホワイトアウト」することができます。これは、シンボルとテキストのレンダリングが混在するテスト（凡例のテストなど）で、ユニットテストがレンダリングされたテキストをテストするように設計されておらず、テストがクロスプラットフォームのテキストレンダリングの違いに左右されたくない場合などに便利です。"
" "

#: ../../docs/developers_guide/unittesting.rst:428
msgid ""
"To compare images in QGIS unit tests you should use the class "
"``QgsMultiRenderChecker`` or one of its subclasses."
msgstr ""
"QGISのユニットテストで画像を比較するには、クラス ``QgsMultiRenderChecker`` "
"またはそのサブクラスのいずれかを使用する必要があります。 "

#: ../../docs/developers_guide/unittesting.rst:431
msgid "To improve tests robustness here are few tips:"
msgstr "テストの堅牢性を高めるためのヒントをいくつか紹介します： "

#: ../../docs/developers_guide/unittesting.rst:433
msgid ""
"Disable antialiasing if you can, as this minimizes cross-platform rendering "
"differences."
msgstr "クロスプラットフォームでのレンダリングの違いを最小限に抑えるため、可能であればアンチエイリアスを無効にしてください。 "

#: ../../docs/developers_guide/unittesting.rst:435
msgid ""
"Make sure your reference images are \"chunky\"... i.e. don't have 1 px wide "
"lines or other fine features, and use large, bold fonts (14 points or more "
"is recommended)."
msgstr ""
"参考画像は「がっしりした」ものにしてください...つまり、1px幅の線やその他の細かい地物がないようにし、大きくて太いフォント（14ポイント以上を推奨）を使ってください。"
" "

#: ../../docs/developers_guide/unittesting.rst:438
msgid ""
"Sometimes tests generate slightly different sized images (e.g. legend "
"rendering tests, where the image size is dependent on font rendering size - "
"which is subject to cross-platform differences). To account for this, use "
"``QgsMultiRenderChecker::setSizeTolerance()`` and specify the maximum number"
" of pixels that the rendered image width and height differ from the "
"reference image."
msgstr ""
"時々、テストはわずかに異なるサイズの画像を生成します（例えば、凡例のレンダリングテストでは、画像サイズはフォントのレンダリングサイズに依存し、クロスプラットフォームの違いに左右されます）。"
" これを考慮するには、``QgsMultiRenderChecker::setSizeTolerance()`` "
"を使用して、レンダリング画像の幅と高さが参照画像と異なる最大ピクセル数を指定します。 "

#: ../../docs/developers_guide/unittesting.rst:444
msgid ""
"Don't use transparent backgrounds in reference images (CDash does not "
"support them). Instead, use ``QgsMultiRenderChecker::drawBackground()`` to "
"draw a checkboard pattern for the reference image background."
msgstr ""
"参照画像に透明な背景を使用しないでください（CDashはそれをサポートしていません）。その代わりに、 "
"``QgsMultiRenderChecker::drawBackground()`` "
"を使用して、参照画像の背景にチェックボードパターンを描画してください。 "

#: ../../docs/developers_guide/unittesting.rst:447
msgid ""
"When fonts are required, use the font specified in "
"``QgsFontUtils::standardTestFontFamily()`` (\"QGIS Vera Sans\")."
msgstr ""
"フォントが必要な場合は、``QgsFontUtils::standardTestFontFamily()``（\"QGIS Vera "
"Sans\"）で指定されたフォントを使用します。 "

#: ../../docs/developers_guide/unittesting.rst:450
msgid ""
"If travis reports errors for new images (for instance due to antialiasing or"
" font differences), the script :source:`parse_dash_results.py "
"<scripts/parse_dash_results.py>` can help you when you are updating the "
"local test masks."
msgstr ""
"travis が新しい画像に対してエラーを報告した場合 (例えば、アンチエイリアスやフォントの違いによるもの)、 "
":source:`parse_dash_results.py <scripts/parse_dash_results.py>` "
"スクリプトは、ローカルのテストマスクを更新するときに役立ちます。 "

#: ../../docs/developers_guide/unittesting.rst:456
msgid "Adding your unit test to CMakeLists.txt"
msgstr "CMakeLists.txtにユニットテストを追加する"

#: ../../docs/developers_guide/unittesting.rst:459
msgid ""
"Adding your unit test to the build system is simply a matter of editing the "
":file:`CMakeLists.txt` in the test directory, cloning one of the existing "
"test blocks, and then replacing your test class name into it. For example:"
msgstr ""
"ユニットテストをビルドシステムに追加するのは単純で、testディレクトリの :file:`CMakeLists.txt` "
"を編集して、既存のテストブロックのひとつを複製し、テストクラス名を置き換えるだけです。例えば："

#: ../../docs/developers_guide/unittesting.rst:470
msgid "The ADD_QGIS_TEST macro explained"
msgstr "説明されたADD_QGIS_TESTマクロ"

#: ../../docs/developers_guide/unittesting.rst:472
msgid ""
"We'll run through these lines briefly to explain what they do, but if you "
"are not interested, just do the step explained in the above section."
msgstr "これらの行が何をするのかを簡単に説明するが、興味がなければ、上のセクションで説明したステップを実行するだけでよい。 "

#: ../../docs/developers_guide/unittesting.rst:507
msgid ""
"Let's look a little more in detail at the individual lines. First we define "
"the list of sources for our test. Since we have only one source file "
"(following the methodology described above where class declaration and "
"definition are in the same file) its a simple statement:"
msgstr ""
"個々の行をもう少し詳しく見てみましょう。まず、テストのソースのリストを定義します。ソースファイルは1つしかない（クラス宣言と定義が同じファイルにある上述の方法に従って）ので、単純な記述になります："
" "

#: ../../docs/developers_guide/unittesting.rst:516
msgid ""
"Since our test class needs to be run through the Qt meta object compiler "
"(moc) we need to provide a couple of lines to make that happen too:"
msgstr ""
"我々のテストクラスは、Qtのメタオブジェクトコンパイラ(moc)を介して実行する必要があるので、それをするために数行を提供する必要があります："

#: ../../docs/developers_guide/unittesting.rst:525
msgid ""
"Next we tell cmake that it must make an executable from the test class. "
"Remember in the previous section on the last line of the class "
"implementation we included the moc outputs directly into our test class, so "
"that will give it (among other things) a main method so the class can be "
"compiled as an executable:"
msgstr ""
"次に、cmakeにテストクラスから実行ファイルを作るように指示します。前のセクションのクラス実装の最後の行で、mocの出力をテストクラスに直接インクルードし、（とりわけ）メインメソッドが与えられ、クラスを実行ファイルとしてコンパイルできるようになるのを思い出してください："
" "

#: ../../docs/developers_guide/unittesting.rst:536
msgid ""
"Next we need to specify any library dependencies. At the moment, classes "
"have been implemented with a catch-all QT_LIBRARIES dependency, but we will "
"be working to replace that with the specific Qt libraries that each class "
"needs only. Of course you also need to link to the relevant qgis libraries "
"as required by your unit test."
msgstr ""
"次に、ライブラリの依存関係を指定する必要があります。現時点では、クラスは QT_LIBRARIES "
"依存関係をキャッチオールにして実装されていますが、今後は各クラスが必要とする特定の Qt "
"ライブラリのみに置き換える予定です。もちろん、ユニットテストで必要とされる関連するqgisライブラリにリンクする必要もあります。 "

#: ../../docs/developers_guide/unittesting.rst:546
msgid ""
"Next we tell cmake to install the tests to the same place as the qgis "
"binaries itself. This is something we plan to remove in the future so that "
"the tests can run directly from inside the source tree."
msgstr ""
"次に、テストをqgisバイナリと同じ場所にインストールするようcmakeに指示します。これは将来的に削除する予定なので、テストはソースツリーの中から直接実行できるようにします。"
" "

#: ../../docs/developers_guide/unittesting.rst:573
msgid ""
"Finally the above uses ``ADD_TEST`` to register the test with cmake / ctest."
" Here is where the best magic happens - we register the class with ctest. If"
" you recall in the overview we gave in the beginning of this section, we are"
" using both QtTest and CTest together. To recap, QtTest adds a main method "
"to your test unit and handles calling your test methods within the class. It"
" also provides some macros like ``QVERIFY`` that you can use as to test for "
"failure of the tests using conditions. The output from a QtTest unit test is"
" an executable which you can run from the command line. However when you "
"have a suite of tests and you want to run each executable in turn, and "
"better yet integrate running tests into the build process, the CTest is what"
" we use."
msgstr ""
"最後に、``ADD_TEST`` を使って cmake / ctest にテストを登録します。ここで最高のマジックが起こります - クラスを ctest"
" に登録するのです。このセクションの最初に説明した概要を思い出すと、QtTest と CTest の両方を一緒に使っています。まとめると、QtTest "
"はテストユニットに main メソッドを追加し、クラス内でテストメソッドを呼び出す処理を行います。QtTest には ``QVERIFY`` "
"のようなマクロも用意されており、条件を使ってテストの失敗をテストすることができます。QtTest "
"のユニットテストの出力は、コマンドラインから実行できる実行ファイルです。しかし、一連のテストがあり、各実行ファイルを順番に実行したい場合、さらにテストの実行をビルドプロセスに統合したい場合は、CTest"
" を使用します。 "

#: ../../docs/developers_guide/unittesting.rst:586
msgid "Building your unit test"
msgstr "ユニットテストをビルドする"

#: ../../docs/developers_guide/unittesting.rst:588
msgid ""
"To build the unit test you need only to make sure that ``ENABLE_TESTS=true``"
" in the cmake configuration. There are two ways to do this:"
msgstr ""
"ユニットテストをビルドするには、cmakeの設定で ``ENABLE_TESTS=true`` "
"を確認するだけが必要です。これを行うには2つの方法があります："

#: ../../docs/developers_guide/unittesting.rst:591
msgid ""
"Run ``ccmake ..`` ( or ``cmakesetup ..`` under windows) and interactively "
"set the ``ENABLE_TESTS`` flag to ``ON``."
msgstr ""
"``ccmake..`` （またはウィンドウズの下では ``cmakesetup..`` ）を実行し、対話的に ``ENABLE_TESTS`` "
"フラグを ``ON`` に設定します。"

#: ../../docs/developers_guide/unittesting.rst:593
msgid "Add a command line flag to cmake e.g. ``cmake -DENABLE_TESTS=true ..``"
msgstr "cmakeのためのコマンドラインフラグを追加します、例えば ``cmake -DENABLE_TESTS=true ..``"

#: ../../docs/developers_guide/unittesting.rst:595
msgid ""
"Other than that, just build QGIS as per normal and the tests should build "
"too."
msgstr "それ以外は、通常通りQGISをビルドするだけであり、またテストもビルドする必要があります。"

#: ../../docs/developers_guide/unittesting.rst:599
msgid "Run your tests"
msgstr "テストを実行"

#: ../../docs/developers_guide/unittesting.rst:602
msgid ""
"The simplest way to run the tests is as part of your normal build process:"
msgstr "テストを実行する最も簡単な方法は、通常のビルドプロセスの一部としてです："

#: ../../docs/developers_guide/unittesting.rst:608
msgid ""
"The ``make test`` command will invoke CTest which will run each test that "
"was registered using the ADD_TEST CMake directive described above. Typical "
"output from ``make test`` will look like this:"
msgstr ""
"``make test`` コマンドは CTest を起動し、前述の ADD_TEST CMake "
"ディレクティブを使って登録された各テストを実行します。``make test`` の典型的な出力は以下のようになります： "

#: ../../docs/developers_guide/unittesting.rst:628
msgid ""
"If a test fails, you can use the ctest command to examine more closely why "
"it failed. Use the ``-R`` option to specify a regex for which tests you want"
" to run and ``-V`` to get verbose output:"
msgstr ""
"テストが失敗した場合は、それが失敗した理由をより密接に検討するctestコマンドを使用できます。実行したいテストするために正規表現を指定するためには "
"``-R`` オプションを、冗長な出力を得るためには ``-V`` オプションを使用してください："

#: ../../docs/developers_guide/unittesting.rst:673
msgid "Running individual tests"
msgstr "個々のテストの実行"

#: ../../docs/developers_guide/unittesting.rst:675
msgid ""
"C++ tests are ordinary applications. You can run them from the build folder "
"like any executable."
msgstr "C++テストは普通のアプリケーションです。他の実行ファイルと同じように、ビルド・フォルダーから実行できます。 "

#: ../../docs/developers_guide/unittesting.rst:691
msgid ""
"These tests also take `command line arguments <https://doc.qt.io/qt-5/qtest-"
"overview.html#qt-test-command-line-arguments>`_. This makes it possible to "
"run a specific subset of tests:"
msgstr ""
"これらのテストは `コマンドライン引数 <https://doc.qt.io/qt-5/qtest-overview.html#qt-test-"
"command-line-arguments>`_ も取ります。これにより、特定のテストのサブセットを実行することができます： "

#: ../../docs/developers_guide/unittesting.rst:707
msgid "Debugging unit tests"
msgstr "ユニットテストをデバッグする"

#: ../../docs/developers_guide/unittesting.rst:710
msgid "C++ Tests"
msgstr "C++ テスト"

#: ../../docs/developers_guide/unittesting.rst:712
msgid ""
"For C++ unit tests, QtCreator automatically adds run targets, so you can "
"start them from the debugger."
msgstr "C++ ユニットテストでは、QtCreator が自動的に実行ターゲットを追加するので、デバッガから開始できます。 "

#: ../../docs/developers_guide/unittesting.rst:715
msgid ""
"If you go to *Projects* and there to the *Build & Run* --> Desktop *Run* "
"tab, you can also specify command line parameters that will allow a subset "
"of the tests to be run inside a .cpp file in the debugger."
msgstr ""
"*Projects* から *Build & Run* --> Desktop *Run* "
"タブを開くと、デバッガの.cppファイル内でテストのサブセットを実行するためのコマンドラインパラメータを指定することもできます。 "

#: ../../docs/developers_guide/unittesting.rst:720
msgid "Python Tests"
msgstr "Pythonテスト"

#: ../../docs/developers_guide/unittesting.rst:722
msgid ""
"It's also possible to start Python unit tests from QtCreator with GDB. For "
"this, you need to go to :guilabel:`Projects` and choose :guilabel:`Run` "
"under :guilabel:`Build & Run`. Then add a new ``Run configuration`` with the"
" executable ``/usr/bin/python3`` and the Command line arguments set to the "
"path of the unit test python file, e.g. "
":file:`/home/user/dev/qgis/QGIS/tests/src/python/test_qgsattributeformeditorwidget.py`."
msgstr ""
"GDBを使ってQtCreatorからPythonのユニットテストを開始することも可能です。そのためには :guilabel:`Projects` "
"に行き、 :guilabel:`Build & Run` の下にある :guilabel:`Run` を選択する必要があります。次に、実行ファイル "
"``/usr/bin/python3`` とコマンドライン引数をユニットテストのPythonファイルのパスに設定した新しい ``Run "
"configuration`` を追加します。 例 "
":file:`/home/user/dev/qgis/QGIS/tests/src/python/test_qgsattrbuteformeditorwidget.py`。"

#: ../../docs/developers_guide/unittesting.rst:730
msgid "Now also change the ``Run Environment`` and add 3 new variables:"
msgstr "次に ``Run Environment`` を変更し、3つの新しい変数を追加します： "

#: ../../docs/developers_guide/unittesting.rst:733
msgid "Variable"
msgstr "Variable"

#: ../../docs/developers_guide/unittesting.rst:733
msgid "Value"
msgstr "値"

#: ../../docs/developers_guide/unittesting.rst:735
msgid "PYTHONPATH"
msgstr "PYTHONPATH"

#: ../../docs/developers_guide/unittesting.rst:735
msgid ""
"[build]/output/python/:[build]/output/python/plugins:[source]/tests/src/python"
msgstr ""
"[build]/output/python/:[build]/output/python/plugins:[source]/tests/src/python"

#: ../../docs/developers_guide/unittesting.rst:737
msgid "QGIS_PREFIX_PATH"
msgstr "QGIS_PREFIX_PATH"

#: ../../docs/developers_guide/unittesting.rst:737
msgid "[build]/output"
msgstr "[build]/output"

#: ../../docs/developers_guide/unittesting.rst:739
msgid "LD_LIBRARY_PATH"
msgstr "LD_LIBRARY_PATH"

#: ../../docs/developers_guide/unittesting.rst:739
msgid "[build]/output/lib"
msgstr "[build]/output/lib"

#: ../../docs/developers_guide/unittesting.rst:742
msgid ""
"Replace ``[build]`` with your build directory and ``[source]`` with your "
"source directory."
msgstr "``[build]`` はビルドディレクトリに、``[source]`` はソースディレクトリに置き換えてください。 "

#: ../../docs/developers_guide/unittesting.rst:746
msgid "Have fun"
msgstr "楽しむ"

#: ../../docs/developers_guide/unittesting.rst:748
msgid ""
"Well that concludes this section on writing unit tests in QGIS. We hope you "
"will get into the habit of writing test to test new functionality and to "
"check for regressions. Some aspects of the test system (in particular the "
":file:`CMakeLists.txt` parts) are still being worked on so that the testing "
"framework works in a truly platform independent way."
msgstr ""
"これでQGISのユニットテストの書き方についてのこのセクションは終わりです。新しい機能をテストしたり、リグレッションをチェックするためにテストを書く習慣をつけていただければと思います。テストシステムのいくつかの側面（特に"
" :file:`CMakeLists.txt` の部分）は、テストフレームワークが真にプラットフォームに依存しない方法で動作するように、まだ作業中です。"
