# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
# 
# Translators:
# fairtommy <fairtommy@gmail.com>, 2025
# Harrissou Sant-anna, 2025
# tomoya miyoshi, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation 3.34\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-15 11:22+0000\n"
"PO-Revision-Date: 2025-02-27 21:31+0000\n"
"Last-Translator: tomoya miyoshi, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/qgis/teams/6144/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../<rst_prolog>:5
msgid ""
"Translation is a community effort :ref:`you can join "
"<translation_guidelines>`. This page is currently translated at |translation"
" progress|."
msgstr ""
"翻訳は :ref:`あなたが参加できる <translation_guidelines>`  コミュニティの取り組みです。このページは現在 "
"|translation progress| 翻訳されています。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:25
msgid "Geometry Handling"
msgstr "ジオメトリの操作"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:27
msgid ""
"The code snippets on this page need the following imports if you're outside "
"the pyqgis console:"
msgstr "pyqgisコンソールを使わない場合、このページにあるコードスニペットは次のインポートが必要です:"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:51
msgid ""
"Points, linestrings and polygons that represent a spatial feature are "
"commonly referred to as geometries. In QGIS they are represented with the "
":class:`QgsGeometry <qgis.core.QgsGeometry>` class."
msgstr ""
"空間地物を表すポイント、ラインストリング、ポリゴンは一般的にジオメトリと呼ばれます。QGISでは、これらは :class:`QgsGeometry "
"<qgis.core.QgsGeometry>` というクラスで表現されます。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:55
msgid ""
"Sometimes one geometry is actually a collection of simple (single-part) "
"geometries. Such a geometry is called a multi-part geometry. If it contains "
"just one type of simple geometry, we call it multi-point, multi-linestring "
"or multi-polygon. For example, a country consisting of multiple islands can "
"be represented as a multi-polygon."
msgstr ""
"ひとつのジオメトリが実際には単純な（シングルパート）ジオメトリの集合であることがあります。このようなジオメトリは、マルチパートジオメトリと呼ばれます。それが1種類の単純ジオメトリだけを含む場合は、マルチポイント、マルチラインまたはマルチポリゴンと呼びます。例えば、複数の島からなる国は、マルチポリゴンとして表現できます。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:61
msgid ""
"The coordinates of geometries can be in any coordinate reference system "
"(CRS). When fetching features from a layer, associated geometries will have "
"coordinates in CRS of the layer."
msgstr ""
"ジオメトリの座標値はどの座標参照系(CRS)も利用できます。レイヤーから地物を持ってきたときに、ジオメトリの座標値はレイヤーのCRSのものを持つでしょう。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:72
msgid "Geometry Construction"
msgstr "ジオメトリの構成"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:74
msgid "PyQGIS provides several options for creating a geometry:"
msgstr "PyQGISでは、ジオメトリを作成するためのいくつかのオプションが用意されています:"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:76
msgid "from coordinates"
msgstr "座標から"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:95
msgid ""
"Coordinates are given using :class:`QgsPoint <qgis.core.QgsPoint>` class or "
":class:`QgsPointXY <qgis.core.QgsPointXY>` class. The difference between "
"these classes is that :class:`QgsPoint <qgis.core.QgsPoint>` supports M and "
"Z dimensions."
msgstr ""
"座標は :class:`QgsPoint <qgis.core.QgsPoint>` クラスまたは :class:`QgsPointXY "
"<qgis.core.QgsPointXY>` クラスを用いて与えられます。これらのクラスの違いは、 :class:`QgsPoint "
"<qgis.core.QgsPoint>` はMとZの次元をサポートしていることです。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:99
msgid "A Polyline (Linestring) is represented by a list of points."
msgstr "ポリライン(Linestring)は、ポイントのリストで表現されます。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:101
msgid ""
"A Polygon is represented by a list of linear rings (i.e. closed "
"linestrings). The first ring is the outer ring (boundary), optional "
"subsequent rings are holes in the polygon. Note that unlike some programs, "
"QGIS will close the ring for you so there is no need to duplicate the first "
"point as the last."
msgstr ""
"ポリゴンは、線形のリング（すなわち閉じた線分）のリストで表されます。最初のリングは外側のリング（境界）であり、オプションで続くリングはポリゴンの穴となります。いくつかのプログラムとは異なり、QGISはリングを閉じてくれるので、最初のポイントを最後のポイントとして複製する必要はありません。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:107
msgid ""
"Multi-part geometries go one level further: multi-point is a list of points,"
" multi-linestring is a list of linestrings and multi-polygon is a list of "
"polygons."
msgstr ""
"マルチパートジオメトリはさらに上のレベルです: "
"マルチポイントはポイントのリストで、マルチラインストリングはラインストリングのリストで、マルチポリゴンはポリゴンのリストです。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:111
msgid "from well-known text (WKT)"
msgstr "well-knownテキスト（WKT）から"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:123
msgid "from well-known binary (WKB)"
msgstr "well-knownバイナリ（WKB）から"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:142
msgid "Access to Geometry"
msgstr "ジオメトリにアクセス"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:144
msgid ""
"First, you should find out the geometry type. The :meth:`wkbType() "
"<qgis.core.QgsGeometry.wkbType>` method is the one to use. It returns a "
"value from the :class:`QgsWkbTypes.Type <qgis.core.QgsWkbTypes>` "
"enumeration."
msgstr ""
"まず、ジオメトリタイプを調べます。使用するのは :meth:`wkbType() <qgis.core.QgsGeometry.wkbType>` "
"というメソッドです。これは :class:`QgsWkbTypes.Type <qgis.core.QgsWkbTypes>` の列挙から値を返します。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:164
msgid ""
"As an alternative, one can use the :meth:`type() "
"<qgis.core.QgsGeometry.type>` method which returns a value from the "
":meth:`QgsWkbTypes.GeometryType <qgis.core.QgsWkbTypes.geometryType>` "
"enumeration."
msgstr ""
"代替案として、 :meth:`type() <qgis.core.QgsGeometry.type>` メソッドを使うことができます。このメソッドは "
":meth:`QgsWkbTypes.GeometryType <qgis.core.QgsWkbTypes.geometryType>` "
"列挙から値を返します。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:178
msgid ""
"You can use the :meth:`displayString() "
"<qgis.core.QgsWkbTypes.displayString>` function to get a human readable "
"geometry type."
msgstr ""
":meth:`displayString() <qgis.core.QgsWkbTypes.displayString>` "
"関数を使用すると、人間が読めるジオメトリタイプを取得することができます。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:197
msgid ""
"There is also a helper function :meth:`isMultipart() "
"<qgis.core.QgsGeometry.isMultipart>` to find out whether a geometry is "
"multipart or not."
msgstr ""
"また、ジオメトリがマルチパートであるかどうかを調べるヘルパー関数 :meth:`isMultipart() "
"<qgis.core.QgsGeometry.isMultipart>` も用意されています。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:200
msgid ""
"To extract information from a geometry there are accessor functions for "
"every vector type. Here's an example on how to use these accessors:"
msgstr ""
"ジオメトリから情報を抽出するために、各ベクタ型に対応したアクセサ関数が用意されています。ここでは、これらのアクセサの使い方の例を紹介します:"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:220
msgid ""
"The tuples (x,y) are not real tuples, they are :class:`QgsPoint "
"<qgis.core.QgsPoint>` objects, the values are accessible with :meth:`x() "
"<qgis.core.QgsPoint.x>` and :meth:`y() <qgis.core.QgsPoint.y>` methods."
msgstr ""
"タプル (x,y) は実際のタプルではなく、 :class:`QgsPoint <qgis.core.QgsPoint>` オブジェクトであり、値は "
":meth:`x() <qgis.core.QgsPoint.x>` と :meth:`y() <qgis.core.QgsPoint.y>` "
"というメソッドでアクセスできます。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:224
msgid ""
"For multipart geometries there are similar accessor functions: "
":meth:`asMultiPoint() <qgis.core.QgsGeometry.asMultiPoint>`, "
":meth:`asMultiPolyline() <qgis.core.QgsGeometry.asMultiPolyline>` and "
":meth:`asMultiPolygon() <qgis.core.QgsGeometry.asMultiPolygon>`."
msgstr ""
"マルチパートジオメトリについては、同様のアクセス関数があります： :meth:`asMultiPoint() "
"<qgis.core.QgsGeometry.asMultiPoint>`, :meth:`asMultiPolyline() "
"<qgis.core.QgsGeometry.asMultiPolyline>` および :meth:`asMultiPolygon() "
"<qgis.core.QgsGeometry.asMultiPolygon>`。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:230
msgid ""
"It is possible to iterate over all the parts of a geometry, regardless of "
"the geometry's type. E.g."
msgstr "ジオメトリのタイプに関係なく、ジオメトリのすべてのパーツに対して反復処理を行うことが可能です。例"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:265
msgid ""
"It's also possible to modify each part of the geometry using "
":meth:`QgsGeometry.parts() <qgis.core.QgsGeometry.parts>` method."
msgstr ""
"また、 :meth:`QgsGeometry.parts() <qgis.core.QgsGeometry.parts>` "
"メソッドを使ってジオメトリの各パーツを修正することも可能です。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:287
msgid "Geometry Predicates and Operations"
msgstr "ジオメトリの述語と操作"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:289
msgid ""
"QGIS uses GEOS library for advanced geometry operations such as geometry "
"predicates (:meth:`contains() <qgis.core.QgsGeometry.contains>`, "
":meth:`intersects() <qgis.core.QgsGeometry.intersects>`, …) and set "
"operations (:meth:`combine() <qgis.core.QgsGeometry.combine>`, "
":meth:`difference() <qgis.core.QgsGeometry.difference>`, …). It can also "
"compute geometric properties of geometries, such as area (in the case of "
"polygons) or lengths (for polygons and lines)."
msgstr ""
"QGISでは、ジオメトリ述語（:meth:`contains() <qgis.core.QgsGeometry.contains>`, "
":meth:`intersects() <qgis.core.QgsGeometry.intersects>` , ...)や集合演算 "
"(:meth:`combine() <qgis.core.QgsGeometry.combine>`, :meth:`difference() "
"<qgis.core.QgsGeometry.difference>`, ...)などの高度なジオメトリ操作にGEOSライブラリを使っています。 "
"また、面積（ポリゴンの場合）や長さ（ポリゴンとラインの場合）のようなジオメトリのプロパティを計算することもできます。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:295
msgid ""
"Let's see an example that combines iterating over the features in a given "
"layer and performing some geometric computations based on their geometries. "
"The below code will compute and print the area and perimeter of each country"
" in the ``countries`` layer within our tutorial QGIS project."
msgstr ""
"ここでは、与えられたレイヤーの地物を繰り返し処理し、そのジオメトリに基づいて幾何学的な計算を実行する例を見てみましょう。以下のコードは、チュートリアル "
"QGIS プロジェクトの ``countries`` レイヤーにある各国の面積と周囲長を計算し、表示するものです。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:300
#: ../../docs/pyqgis_developer_cookbook/geometry.rst:339
msgid ""
"The following code assumes ``layer`` is a :class:`QgsVectorLayer "
"<qgis.core.QgsVectorLayer>` object that has Polygon feature type."
msgstr ""
"以下のコードは ``レイヤ`` が :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` オブジェクトで"
" ポリゴン地物タイプを持っていると仮定します。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:330
msgid ""
"Now you have calculated and printed the areas and perimeters of the "
"geometries. You may however quickly notice that the values are strange. That"
" is because areas and perimeters don't take CRS into account when computed "
"using the :meth:`area() <qgis.core.QgsGeometry.area>` and :meth:`length() "
"<qgis.core.QgsGeometry.length>` methods from the :class:`QgsGeometry "
"<qgis.core.QgsGeometry>` class. For a more powerful area and distance "
"calculation, the :class:`QgsDistanceArea <qgis.core.QgsDistanceArea>` class "
"can be used, which can perform ellipsoid based calculations:"
msgstr ""
"さて、これでジオメトリの面積と外周を計算し、印刷することができました。しかし、その値がおかしなことにすぐに気づくでしょう。これは、 "
":class:`QgsGeometry <qgis.core.QgsGeometry>` クラスの :meth:`area() "
"<qgis.core.QgsGeometry.area>` と :meth:`length() "
"<qgis.core.QgsGeometry.length>` "
"を使って計算した場合、面積や周長はCRSを考慮しないためです。より強力な面積と距離の計算を行うには、 :class:`QgsDistanceArea "
"<qgis.core.QgsDistanceArea>` クラスを使用することができ、楕円体ベースの計算を行うことができます:"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:375
msgid "Alternatively, you may want to know the distance between two points."
msgstr "また、2点間の距離を知りたい場合もあります。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:395
msgid ""
"You can find many example of algorithms that are included in QGIS and use "
"these methods to analyze and transform vector data. Here are some links to "
"the code of a few of them."
msgstr ""
"QGISに含まれているアルゴリズムの多くの例を見つけて、これらのメソッドをベクターデータを分析し変換するために使用できます。ここにそれらのコードのいくつかへのリンクを記載します。"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:399
msgid ""
"Distance and area using the :class:`QgsDistanceArea "
"<qgis.core.QgsDistanceArea>` class: :source:`Distance matrix algorithm "
"<python/plugins/processing/algs/qgis/PointDistance.py>`"
msgstr ""
":class:`QgsDistanceArea <qgis.core.QgsDistanceArea>` クラス: :source:`Distance "
"matrix algorithm <python/plugins/processing/algs/qgis/PointDistance.py>` "
"による距離と領域の計算"

#: ../../docs/pyqgis_developer_cookbook/geometry.rst:401
msgid ""
":source:`Lines to polygons algorithm "
"<python/plugins/processing/algs/qgis/LinesToPolygons.py>`"
msgstr ""
":source:`Lines to polygons algorithm "
"<python/plugins/processing/algs/qgis/LinesToPolygons.py>`"
