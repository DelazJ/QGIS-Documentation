# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
# 
# Translators:
# Harrissou Sant-anna, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation 3.34\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-31 15:59+0000\n"
"PO-Revision-Date: 2025-02-27 21:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/qgis/teams/6144/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../<rst_prolog>:5
msgid ""
"Translation is a community effort :ref:`you can join "
"<translation_guidelines>`. This page is currently translated at |translation"
" progress|."
msgstr ""
"Översättning är en gemenskapsinsats :ref:`du kan gå med i "
"<translation_guidelines>`. Den här sidan är för närvarande översatt till "
"|translation progress|."

#: ../../docs/developers_guide/unittesting.rst:6
msgid "Unit Testing"
msgstr "Enhetstestning"

#: ../../docs/developers_guide/unittesting.rst:11
msgid ""
"As of November 2007 we require all new features going into master to be "
"accompanied with a unit test. Initially we have limited this requirement to "
"qgis_core, and we will extend this requirement to other parts of the code "
"base once people are familiar with the procedures for unit testing explained"
" in the sections that follow."
msgstr ""
"Från och med november 2007 kräver vi att alla nya funktioner som går in i "
"master ska åtföljas av ett enhetstest. Inledningsvis har vi begränsat detta "
"krav till qgis_core, och vi kommer att utöka detta krav till andra delar av "
"kodbasen när folk är bekanta med de procedurer för enhetstestning som "
"beskrivs i de avsnitt som följer."

#: ../../docs/developers_guide/unittesting.rst:19
msgid "The QGIS testing framework - an overview"
msgstr "QGIS testramverk - en översikt"

#: ../../docs/developers_guide/unittesting.rst:21
msgid ""
"Unit testing is carried out using a combination of QTestLib (the Qt testing "
"library) and CTest (a framework for compiling and running tests as part of "
"the CMake build process). Lets take an overview of the process before we "
"delve into the details:"
msgstr ""
"Enhetstestning utförs med hjälp av en kombination av QTestLib (Qt-"
"testbiblioteket) och CTest (ett ramverk för att sammanställa och köra tester"
" som en del av CMake-byggprocessen). Låt oss ta en överblick över processen "
"innan vi går in på detaljerna:"

#: ../../docs/developers_guide/unittesting.rst:26
msgid ""
"There is some code you want to test, e.g. a class or function. Extreme "
"programming advocates suggest that the code should not even be written yet "
"when you start building your tests, and then as you implement your code you "
"can immediately validate each new functional part you add with your test. In"
" practice you will probably need to write tests for pre-existing code in "
"QGIS since we are starting with a testing framework well after much "
"application logic has already been implemented."
msgstr ""
"Det finns en kod som du vill testa, t.ex. en klass eller funktion. "
"Förespråkare för extrem programmering föreslår att koden inte ens ska vara "
"skriven ännu när du börjar bygga dina tester, och sedan när du implementerar"
" din kod kan du omedelbart validera varje ny funktionell del som du lägger "
"till med ditt test. I praktiken kommer du förmodligen att behöva skriva "
"tester för redan existerande kod i QGIS eftersom vi börjar med ett "
"testramverk långt efter att mycket av applikationslogiken redan har "
"implementerats."

#: ../../docs/developers_guide/unittesting.rst:34
msgid ""
"You create a unit test. This happens under ``<QGIS Source "
"Dir>/tests/src/core`` in the case of the core lib. The test is basically a "
"client that creates an instance of a class and calls some methods on that "
"class. It will check the return from each method to make sure it matches the"
" expected value. If any one of the calls fails, the unit will fail."
msgstr ""
"Du skapar ett enhetstest. Detta sker under ``<QGIS Source "
"Dir>/tests/src/core`` i fallet med core lib. Testet är i grunden en klient "
"som skapar en instans av en klass och anropar några metoder på den klassen. "
"Det kommer att kontrollera avkastningen från varje metod för att se till att"
" den matchar det förväntade värdet. Om något av anropen misslyckas kommer "
"enheten att misslyckas."

#: ../../docs/developers_guide/unittesting.rst:40
msgid ""
"You include QtTestLib macros in your test class. This macro is processed by "
"the Qt meta object compiler (moc) and expands your test class into a "
"runnable application."
msgstr ""
"Du inkluderar QtTestLib-makron i din testklass. Detta makro bearbetas av Qt "
"meta object compiler (moc) och utökar din testklass till en körbar "
"applikation."

#: ../../docs/developers_guide/unittesting.rst:44
msgid ""
"You add a section to the CMakeLists.txt in your tests directory that will "
"build your test."
msgstr ""
"Du lägger till ett avsnitt i CMakeLists.txt i din testkatalog som kommer att"
" bygga ditt test."

#: ../../docs/developers_guide/unittesting.rst:47
msgid ""
"You ensure you have ``ENABLE_TESTING`` enabled in ccmake / cmakesetup. This "
"will ensure your tests actually get compiled when you type make."
msgstr ""
"Du måste se till att du har aktiverat ``ENABLE_TESTING`` i ccmake / "
"cmakesetup. Detta kommer att säkerställa att dina tester faktiskt kompileras"
" när du skriver make."

#: ../../docs/developers_guide/unittesting.rst:50
msgid ""
"You optionally add test data to ``<QGIS Source Dir>/tests/testdata`` if your"
" test is data driven (e.g. needs to load a shapefile). These test data "
"should be as small as possible and wherever possible you should use the "
"existing datasets already there. Your tests should never modify this data in"
" situ, but rather make a temporary copy somewhere if needed."
msgstr ""
"Du kan lägga till testdata i<QGIS Source Dir>/tests/testdata om ditt test är"
" datadrivet (t.ex. om du behöver ladda en shapefile). Dessa testdata ska "
"vara så små som möjligt och när det är möjligt ska du använda de befintliga "
"dataset som redan finns där. Dina tester ska aldrig modifiera dessa data på "
"plats, utan snarare göra en tillfällig kopia någonstans om det behövs."

#: ../../docs/developers_guide/unittesting.rst:56
msgid ""
"You compile your sources and install. Do this using normal ``make && (sudo)"
"  make install`` procedure."
msgstr ""
"Du kompilerar dina källor och installerar. Detta gör du med den vanliga "
"proceduren ``make && (sudo) make install``."

#: ../../docs/developers_guide/unittesting.rst:59
msgid ""
"You run your tests. This is normally done simply by doing ``make test`` "
"after the ``make install`` step, though we will explain other approaches "
"that offer more fine grained control over running tests."
msgstr ""
"Du kör dina tester. Detta görs normalt genom att helt enkelt göra ``make "
"test`` efter ``make install``, men vi kommer att förklara andra "
"tillvägagångssätt som ger mer finkornig kontroll över testkörningen."

#: ../../docs/developers_guide/unittesting.rst:64
msgid ""
"Right with that overview in mind, we will delve into a bit of detail. We've "
"already done much of the configuration for you in CMake and other places in "
"the source tree so all you need to do are the easy bits - writing unit "
"tests!"
msgstr ""
"Med den översikten i åtanke kommer vi att gå in lite mer i detalj. Vi har "
"redan gjort mycket av konfigurationen åt dig i CMake och på andra ställen i "
"källträdet, så allt du behöver göra är de enkla bitarna - att skriva "
"enhetstester!"

#: ../../docs/developers_guide/unittesting.rst:70
msgid "Creating a unit test"
msgstr "Skapa ett enhetstest"

#: ../../docs/developers_guide/unittesting.rst:72
msgid ""
"Creating a unit test is easy - typically you will do this by just creating a"
" single :file:`.cpp` file (no :file:`.h` file is used) and implement all "
"your test methods as private methods that return void. We'll use a simple "
"test class for ``QgsRasterLayer`` throughout the section that follows to "
"illustrate. By convention we will name our test with the same name as the "
"class they are testing but prefixed with 'Test'. So our test implementation "
"goes in a file called :file:`testqgsrasterlayer.cpp` and the class itself "
"will be ``TestQgsRasterLayer``. First we add our standard copyright banner:"
msgstr ""
"Att skapa ett enhetstest är enkelt - vanligtvis gör du detta genom att bara "
"skapa en enda :file:`.cpp`-fil (ingen :file:`.h`-fil används) och "
"implementera alla dina testmetoder som privata metoder som returnerar void. "
"Vi kommer att använda en enkel testklass för ``QgsRasterLayer`` i hela "
"avsnittet som följer för att illustrera. Enligt konvention kommer vi att "
"namnge vårt test med samma namn som klassen de testar men prefix med 'Test'."
" Så vår testimplementering går i en fil som heter "
":file:`testqgsrasterlayer.cpp` och själva klassen kommer att vara "
"``TestQgsRasterLayer``. Först lägger vi till vår standard copyright banner:"

#: ../../docs/developers_guide/unittesting.rst:98
msgid ""
"Next we start our includes needed for the tests we plan to run. There is one"
" special include all tests should have:"
msgstr ""
"Därefter börjar vi med de inkluderingar som behövs för de tester vi planerar"
" att köra. Det finns en speciell inkludering som alla tester bör ha:"

#: ../../docs/developers_guide/unittesting.rst:105
msgid ""
"Beyond that you just continue implementing your class as per normal, pulling"
" in whatever headers you may need:"
msgstr ""
"Utöver det fortsätter du bara att implementera din klass som vanligt och "
"drar in de rubriker du behöver:"

#: ../../docs/developers_guide/unittesting.rst:123
msgid ""
"Since we are combining both class declaration and implementation in a single"
" file the class declaration comes next. We start with our doxygen "
"documentation. Every test case should be properly documented. We use the "
"doxygen ingroup directive so that all the UnitTests appear as a module in "
"the generated Doxygen documentation. After that comes a short description of"
" the unit test and the class must inherit from QObject and include the "
"Q_OBJECT macro."
msgstr ""
"Eftersom vi kombinerar både klassdeklaration och implementation i en enda "
"fil kommer klassdeklarationen härnäst. Vi börjar med vår doxygen-"
"dokumentation. Varje testfall bör vara ordentligt dokumenterat. Vi använder "
"doxygen ingroup-direktivet så att alla UnitTests visas som en modul i den "
"genererade Doxygen-dokumentationen. Efter det kommer en kort beskrivning av "
"enhetstestet och klassen måste ärva från QObject och innehålla Q_OBJECT-"
"makrot."

#: ../../docs/developers_guide/unittesting.rst:140
msgid ""
"All our test methods are implemented as private slots. The QtTest framework "
"will sequentially call each private slot method in the test class. There are"
" four 'special' methods which if implemented will be called at the start of "
"the unit test (``initTestCase``), at the end of the unit test "
"(``cleanupTestCase``). Before each test method is called, the ``init()`` "
"method will be called and after each test method is called the ``cleanup()``"
" method is called. These methods are handy in that they allow you to "
"allocate and cleanup resources prior to running each test, and the test unit"
" as a whole."
msgstr ""
"Alla våra testmetoder är implementerade som privata slots. QtTest-ramverket "
"kommer sekventiellt att anropa varje privat slot-metod i testklassen. Det "
"finns fyra \"speciella\" metoder som om de implementeras kommer att anropas "
"i början av enhetstestet (``initTestCase``), i slutet av enhetstestet "
"(``cleanupTestCase``). Innan varje testmetod anropas kommer metoden "
"``init()`` att anropas och efter att varje testmetod har anropats anropas "
"metoden ``cleanup()``. Dessa metoder är praktiska eftersom de gör att du kan"
" allokera och rensa resurser innan du kör varje test och testenheten som "
"helhet."

#: ../../docs/developers_guide/unittesting.rst:161
msgid ""
"Then come your test methods, all of which should take no parameters and "
"should return void. The methods will be called in order of declaration. We "
"are implementing two methods here which illustrate two types of testing."
msgstr ""
"Sedan kommer dina testmetoder, som alla inte ska ta några parametrar och ska"
" returnera void. Metoderna kommer att anropas i deklarationsordning. Här "
"implementerar vi två metoder som illustrerar två olika typer av testning."

#: ../../docs/developers_guide/unittesting.rst:165
msgid ""
"In the first case we want to generally test if the various parts of the "
"class are working, We can use a functional testing approach. Once again, "
"extreme programmers would advocate writing these tests before implementing "
"the class. Then as you work your way through your class implementation you "
"iteratively run your unit tests. More and more test functions should "
"complete successfully as your class implementation work progresses, and when"
" the whole unit test passes, your new class is done and is now complete with"
" a repeatable way to validate it."
msgstr ""
"I det första fallet vill vi i allmänhet testa om de olika delarna av klassen"
" fungerar, Vi kan använda en funktionell testmetod. Återigen skulle extrema "
"programmerare förespråka att skriva dessa tester innan klassen "
"implementeras. När du sedan arbetar dig igenom din klassimplementering kör "
"du iterativt dina enhetstester. Fler och fler testfunktioner bör slutföras "
"framgångsrikt när ditt klassimplementeringsarbete fortskrider, och när hela "
"enhetstestet passerar är din nya klass klar och är nu komplett med ett "
"repeterbart sätt att validera den."

#: ../../docs/developers_guide/unittesting.rst:173
msgid ""
"Typically your unit tests would only cover the public API of your class, and"
" normally you do not need to write tests for accessors and mutators. If it "
"should happen that an accessor or mutator is not working as expected you "
"would normally implement a :ref:`regression test <regression_test>` to check"
" for this."
msgstr ""
"Vanligtvis täcker dina enhetstester bara klassens publika API, och du "
"behöver normalt inte skriva tester för accessorer och mutatorer. Om det "
"skulle hända att en accessor eller mutator inte fungerar som förväntat "
"implementerar man normalt ett :ref:`regressionstest <regression_test>` för "
"att kontrollera detta."

#: ../../docs/developers_guide/unittesting.rst:193
msgid "Implementing a regression test"
msgstr "Implementering av ett regressionstest"

#: ../../docs/developers_guide/unittesting.rst:195
msgid ""
"Next we implement our regression tests. Regression tests should be "
"implemented to replicate the conditions of a particular bug. For example:"
msgstr ""
"Därefter implementerar vi våra regressionstester. Regressionstester bör "
"implementeras för att replikera förhållandena för en viss bugg. Till "
"exempel:"

#: ../../docs/developers_guide/unittesting.rst:198
msgid ""
"We received a report by email that the cell count by rasters was off by 1, "
"throwing off all the statistics for the raster bands."
msgstr ""
"Vi fick en rapport via e-post om att cellantalet per raster var felaktigt "
"med 1, vilket påverkade all statistik för rasterbanden."

#: ../../docs/developers_guide/unittesting.rst:200
msgid ""
"We opened a bug report (`ticket #832 <https://issues.qgis.org/issues/832>`_)"
msgstr ""
"Vi har öppnat en felrapport (`ticket #832 "
"<https://issues.qgis.org/issues/832>`_)"

#: ../../docs/developers_guide/unittesting.rst:201
msgid ""
"We created a regression test that replicated the bug using a small test "
"dataset (a 10x10 raster)."
msgstr ""
"Vi skapade ett regressionstest som replikerade felet med hjälp av en liten "
"testdataset (en 10x10 raster)."

#: ../../docs/developers_guide/unittesting.rst:203
msgid ""
"We ran the test, verifying that it did indeed fail (the cell count was 99 "
"instead of 100)."
msgstr ""
"Vi körde testet och kontrollerade att det verkligen misslyckades "
"(cellantalet var 99 i stället för 100)."

#: ../../docs/developers_guide/unittesting.rst:205
msgid ""
"Then we went to fix the bug and reran the unit test and the regression test "
"passed. We committed the regression test along with the bug fix. Now if "
"anybody breakes this in the source code again in the future, we can "
"immediately identify that the code has regressed."
msgstr ""
"Sedan gick vi för att fixa buggen och göra om enhetstestet och "
"regressionstestet godkändes. Vi begick regressionstestet tillsammans med "
"buggfixen. Om någon bryter mot detta i källkoden igen i framtiden kan vi nu "
"omedelbart identifiera att koden har regresserat."

#: ../../docs/developers_guide/unittesting.rst:210
msgid ""
"Better yet, before committing any changes in the future, running our tests "
"will ensure our changes don't have unexpected side effects - like breaking "
"existing functionality."
msgstr ""
"Ännu bättre: innan vi gör några ändringar i framtiden kan vi genom att köra "
"våra tester se till att ändringarna inte får oväntade bieffekter - som att "
"befintlig funktionalitet bryts."

#: ../../docs/developers_guide/unittesting.rst:214
msgid ""
"There is one more benefit to regression tests - they can save you time. If "
"you ever fixed a bug that involved making changes to the source, and then "
"running the application and performing a series of convoluted steps to "
"replicate the issue, it will be immediately apparent that simply "
"implementing your regression test before fixing the bug will let you "
"automate the testing for bug resolution in an efficient manner."
msgstr ""
"Det finns ytterligare en fördel med regressionstester - de kan spara tid. Om"
" du någonsin har åtgärdat en bugg som innebar att du gjorde ändringar i "
"källan och sedan körde applikationen och utförde en rad invecklade steg för "
"att replikera problemet, kommer det att vara omedelbart uppenbart att om du "
"helt enkelt implementerar ditt regressionstest innan du åtgärdar buggen kan "
"du automatisera testningen för bugglösning på ett effektivt sätt."

#: ../../docs/developers_guide/unittesting.rst:221
msgid ""
"To implement your regression test, you should follow the naming convention "
"of **regression<TicketID>** for your test functions. If no ticket exists for"
" the regression, you should create one first. Using this approach allows the"
" person running a failed regression test easily go and find out more "
"information."
msgstr ""
"För att genomföra ditt regressionstest bör du följa namnkonventionen "
"**regression<TicketID>** för dina testfunktioner. Om det inte finns någon "
"biljett för regressionen bör du först skapa en. Genom att använda detta "
"tillvägagångssätt kan den person som kör ett misslyckat regressionstest "
"enkelt gå och ta reda på mer information."

#: ../../docs/developers_guide/unittesting.rst:240
msgid ""
"Finally in your test class declaration you can declare privately any data "
"members and helper methods your unit test may need. In our case we will "
"declare a ``QgsRasterLayer *`` which can be used by any of our test methods."
" The raster layer will be created in the ``initTestCase()`` function which "
"is run before any other tests, and then destroyed using "
"``cleanupTestCase()`` which is run after all tests. By declaring helper "
"methods (which may be called by various test functions) privately, you can "
"ensure that they won't be automatically run by the QTest executable that is "
"created when we compile our test."
msgstr ""
"Slutligen kan du i din testklassdeklaration privat deklarera alla "
"datamedlemmar och hjälpmetoder som ditt enhetstest kan behöva. I vårt fall "
"kommer vi att deklarera ett ``QgsRasterLayer *`` som kan användas av någon "
"av våra testmetoder. Rasterlagret skapas i funktionen ``initTestCase()`` som"
" körs före alla andra tester, och förstörs sedan med ``cleanupTestCase()`` "
"som körs efter alla tester. Genom att deklarera hjälpmetoder (som kan "
"anropas av olika testfunktioner) privat kan du se till att de inte körs "
"automatiskt av den QTest-körbara fil som skapas när vi kompilerar vårt test."

#: ../../docs/developers_guide/unittesting.rst:257
msgid ""
"That ends our class declaration. The implementation is simply inlined in the"
" same file lower down. First our init and cleanup functions:"
msgstr ""
"Det avslutar vår klassdeklaration. Implementationen är helt enkelt inlined i"
" samma fil längre ner. Först våra init- och cleanup-funktioner:"

#: ../../docs/developers_guide/unittesting.rst:290
msgid "The above init function illustrates a couple of interesting things."
msgstr "Ovanstående init-funktion illustrerar ett par intressanta saker."

#: ../../docs/developers_guide/unittesting.rst:292
msgid ""
"We needed to manually set the QGIS application data path so that resources "
"such as :file:`srs.db` can be found properly."
msgstr ""
"Vi behövde manuellt ställa in QGIS-applikationens datasökväg så att resurser"
" som :file:`srs.db` kan hittas på rätt sätt."

#: ../../docs/developers_guide/unittesting.rst:294
msgid ""
"Secondly, this is a data driven test so we needed to provide a way to "
"generically locate the :file:`tenbytenraster.asc` file. This was achieved by"
" using the compiler define ``TEST_DATA_PATH``. The define is created in the "
"``CMakeLists.txt`` configuration file under :file:`<QGIS Source "
"Root>/tests/CMakeLists.txt` and is available to all QGIS unit tests. If you "
"need test data for your test, commit it under :file:`<QGIS Source "
"Root>/tests/testdata`. You should only commit very small datasets here. If "
"your test needs to modify the test data, it should make a copy of it first."
msgstr ""
"För det andra är detta ett datadrivet test så vi behövde tillhandahålla ett "
"sätt att generiskt lokalisera filen :file:`tenbytenraster.asc`. Detta "
"uppnåddes genom att använda kompilatorns definition ``TEST_DATA_PATH``. "
"Definitionen skapas i konfigurationsfilen ``CMakeLists.txt`` under "
":file:`<QGIS Source Root>/tests/CMakeLists.txt` och är tillgänglig för alla "
"QGIS-enhetstester. Om du behöver testdata för ditt test ska du överföra dem "
"till :file:`<QGIS Source Root>/tests/testdata`. Du bör bara lägga in mycket "
"små dataset här. Om ditt test behöver modifiera testdata bör det först göra "
"en kopia av det."

#: ../../docs/developers_guide/unittesting.rst:304
msgid ""
"Qt also provides some other interesting mechanisms for data driven testing, "
"so if you are interested to know more on the topic, consult the Qt "
"documentation."
msgstr ""
"Qt tillhandahåller också några andra intressanta mekanismer för datadriven "
"testning, så om du är intresserad av att veta mer om ämnet kan du läsa Qt-"
"dokumentationen."

#: ../../docs/developers_guide/unittesting.rst:308
msgid ""
"Next lets look at our functional test. The ``isValid()`` test simply checks "
"if the raster layer was loaded correctly in the initTestCase. QVERIFY is a "
"Qt macro that you can use to evaluate a test condition. There are a few "
"other macros Qt provides for use in your tests including:"
msgstr ""
"Låt oss sedan titta på vårt funktionella test. Testet ``isValid()`` "
"kontrollerar helt enkelt om rasterlagret laddades korrekt i initTestCase. "
"QVERIFY är ett Qt-makro som du kan använda för att utvärdera ett "
"testvillkor. Det finns några andra makron som Qt tillhandahåller för "
"användning i dina tester, t.ex:"

#: ../../docs/developers_guide/unittesting.rst:313
msgid "QCOMPARE ( *actual, expected* )"
msgstr "QCOMPARE ( *actual, expected* )"

#: ../../docs/developers_guide/unittesting.rst:314
msgid "QEXPECT_FAIL ( *dataIndex, comment, mode* )"
msgstr "QEXPECT_FAIL ( *dataIndex, comment, mode* )"

#: ../../docs/developers_guide/unittesting.rst:315
msgid "QFAIL ( *message* )"
msgstr "QFAIL ( *message* )"

#: ../../docs/developers_guide/unittesting.rst:316
msgid "QFETCH ( *type, name* )"
msgstr "QFETCH ( *type, name* )"

#: ../../docs/developers_guide/unittesting.rst:317
msgid "QSKIP ( *description, mode* )"
msgstr "QSKIP ( *description, mode* )"

#: ../../docs/developers_guide/unittesting.rst:318
msgid "QTEST ( *actual, testElement* )"
msgstr "QTEST ( *actual, testElement* )"

#: ../../docs/developers_guide/unittesting.rst:319
msgid "QTEST_APPLESS_MAIN ( *TestClass* )"
msgstr "QTEST_APPLESS_MAIN ( *TestClass* )"

#: ../../docs/developers_guide/unittesting.rst:320
msgid "QTEST_MAIN ( *TestClass* )"
msgstr "QTEST_MAIN ( *TestClass* )"

#: ../../docs/developers_guide/unittesting.rst:321
msgid "QTEST_NOOP_MAIN ()"
msgstr "QTEST_NOOP_MAIN ()"

#: ../../docs/developers_guide/unittesting.rst:322
msgid "QVERIFY2 ( *condition, message* )"
msgstr "QVERIFY2 ( *condition, message* )"

#: ../../docs/developers_guide/unittesting.rst:323
msgid "QVERIFY ( *condition* )"
msgstr "QVERIFY ( *condition* )"

#: ../../docs/developers_guide/unittesting.rst:324
msgid "QWARN ( *message* )"
msgstr "QWARN ( *message* )"

#: ../../docs/developers_guide/unittesting.rst:326
msgid ""
"Some of these macros are useful only when using the Qt framework for data "
"driven testing (see the Qt docs for more detail)."
msgstr ""
"Vissa av dessa makron är endast användbara när du använder Qt-ramverket för "
"datadriven testning (se Qt-dokumenten för mer information)."

#: ../../docs/developers_guide/unittesting.rst:336
msgid ""
"Normally your functional tests would cover all the range of functionality of"
" your classes public API where feasible. With our functional tests out the "
"way, we can look at our regression test example."
msgstr ""
"Normalt bör dina funktionella tester täcka alla funktioner i dina klassers "
"offentliga API där det är möjligt. Med våra funktionella tester ur vägen kan"
" vi titta på vårt regressionstest exempel."

#: ../../docs/developers_guide/unittesting.rst:340
msgid ""
"Since the issue in bug #832 is a misreported cell count, writing our test is"
" simply a matter of using QVERIFY to check that the cell count meets the "
"expected value:"
msgstr ""
"Eftersom problemet i bugg #832 är ett felaktigt rapporterat cellantal, är "
"det bara att använda QVERIFY för att kontrollera att cellantalet motsvarar "
"det förväntade värdet när vi skriver vårt test:"

#: ../../docs/developers_guide/unittesting.rst:355
msgid ""
"With all the unit test functions implemented, there's one final thing we "
"need to add to our test class:"
msgstr ""
"När alla testfunktioner är implementerade finns det en sista sak vi måste "
"lägga till i vår testklass:"

#: ../../docs/developers_guide/unittesting.rst:363
msgid ""
"The purpose of these two lines is to signal to Qt's moc that this is a "
"QtTest (it will generate a main method that in turn calls each test "
"function. The last line is the include for the MOC generated sources. You "
"should replace ``testqgsrasterlayer`` with the name of your class in lower "
"case."
msgstr ""
"Syftet med dessa två rader är att signalera till Qt's moc att detta är ett "
"QtTest (det kommer att generera en main-metod som i sin tur anropar varje "
"testfunktion. Den sista raden är include för de källor som genereras av MOC."
" Du bör ersätta ``testqgsrasterlayer`` med namnet på din klass i gemener."

#: ../../docs/developers_guide/unittesting.rst:369
msgid "Comparing images for rendering tests"
msgstr "Jämförelse av bilder för renderingstester"

#: ../../docs/developers_guide/unittesting.rst:371
msgid ""
"Rendering images on different environments can produce subtle differences "
"due to platform-specific implementations (e.g. different font rendering and "
"antialiasing algorithms), to the fonts available on the system and for other"
" obscure reasons."
msgstr ""
"Rendering av bilder i olika miljöer kan ge subtila skillnader på grund av "
"plattformsspecifika implementeringar (t.ex. olika algoritmer för rendering "
"av teckensnitt och antialiasing), vilka teckensnitt som finns tillgängliga i"
" systemet och andra oklara orsaker."

#: ../../docs/developers_guide/unittesting.rst:375
msgid ""
"When a rendering test runs on Travis and fails, look for the dash link at "
"the very bottom of the Travis log. This link will take you to a cdash page "
"where you can see the rendered vs expected images, along with a "
"\"difference\" image which highlights in red any pixels which did not match "
"the reference image."
msgstr ""
"När ett renderingstest körs på Travis och misslyckas ska du leta efter dash-"
"länken längst ner i Travis-loggen. Den här länken tar dig till en cdash-sida"
" där du kan se de renderade bilderna jämfört med de förväntade bilderna, "
"tillsammans med en \"skillnadsbild\" som i rött markerar alla pixlar som "
"inte matchade referensbilden."

#: ../../docs/developers_guide/unittesting.rst:380
msgid ""
"The QGIS unit test system has support for adding \"mask\" images, which are "
"used to indicate when a rendered image may differ from the reference image. "
"A mask image is an image (with the same name as the reference image, but "
"including a **_mask.png** suffix), and should be the same dimensions as the "
"reference image. In a mask image the pixel values indicate how much that "
"individual pixel can differ from the reference image, so a black pixel "
"indicates that the pixel in the rendered image must exactly match the same "
"pixel in the reference image. A pixel with RGB 2, 2, 2 means that the "
"rendered image can vary by up to 2 in its RGB values from the reference "
"image, and a fully white pixel (255, 255, 255) means that the pixel is "
"effectively ignored when comparing the expected and rendered images."
msgstr ""
"QGIS enhetstestsystem har stöd för att lägga till \"mask\"-bilder, som "
"används för att ange när en renderad bild kan skilja sig från "
"referensbilden. En maskbild är en bild (med samma namn som referensbilden, "
"men med suffixet **_mask.png**) som ska ha samma dimensioner som "
"referensbilden. I en maskbild anger pixelvärdena hur mycket den enskilda "
"pixeln kan skilja sig från referensbilden, så en svart pixel anger att "
"pixeln i den renderade bilden exakt måste matcha samma pixel i "
"referensbilden. En pixel med RGB 2, 2, 2 betyder att den återgivna bilden "
"kan variera med upp till 2 i sina RGB-värden från referensbilden, och en "
"helt vit pixel (255, 255, 255) betyder att pixeln i praktiken ignoreras när "
"man jämför den förväntade och den återgivna bilden."

#: ../../docs/developers_guide/unittesting.rst:392
msgid ""
"A utility script to generate mask images is available as "
"``scripts/generate_test_mask_image.py``. This script is used by passing it "
"the path of a reference image (e.g. "
"``tests/testdata/control_images/annotations/expected_annotation_fillstyle/expected_annotation_fillstyle.png``)"
" and the path to your rendered image."
msgstr ""
"Ett verktygsskript för att generera maskbilder finns tillgängligt som "
"``scripts/generate_test_mask_image.py``. Det här skriptet används genom att "
"du skickar sökvägen till en referensbild (t.ex. "
"``tests/testdata/control_images/annotations/expected_annotation_fillstyle/expected_annotation_fillstyle.png``)"
" och sökvägen till din renderade bild."

#: ../../docs/developers_guide/unittesting.rst:397
msgid "E.g."
msgstr "T.ex."

#: ../../docs/developers_guide/unittesting.rst:403
msgid ""
"You can shortcut the path to the reference image by passing a partial part "
"of the test name instead, e.g."
msgstr ""
"Du kan förkorta sökvägen till referensbilden genom att skicka en del av "
"testnamnet istället, t.ex."

#: ../../docs/developers_guide/unittesting.rst:410
msgid ""
"(This shortcut only works if a single matching reference image is found. If "
"multiple matches are found you will need to provide the full path to the "
"reference image.)"
msgstr ""
"(Den här genvägen fungerar bara om en enda matchande referensbild hittas. Om"
" flera matchningar hittas måste du ange den fullständiga sökvägen till "
"referensbilden)"

#: ../../docs/developers_guide/unittesting.rst:414
msgid ""
"The script also accepts http urls for the rendered image, so you can "
"directly copy a rendered image url from the cdash results page and pass it "
"to the script."
msgstr ""
"Skriptet accepterar också http-url:er för den renderade bilden, så att du "
"direkt kan kopiera en url för den renderade bilden från cdash-résultatsidan "
"och skicka den till skriptet."

#: ../../docs/developers_guide/unittesting.rst:417
msgid ""
"Be careful when generating mask images - you should always view the "
"generated mask image and review any white areas in the image. Since these "
"pixels are ignored, make sure that these white images do not cover any "
"important portions of the reference image -- otherwise your unit test will "
"be meaningless!"
msgstr ""
"Var försiktig när du genererar maskbilder - du bör alltid visa den "
"genererade maskbilden och granska eventuella vita områden i bilden. Eftersom"
" dessa pixlar ignoreras bör du se till att dessa vita områden inte täcker "
"några viktiga delar av referensbilden - annars blir ditt enhetstest "
"meningslöst!"

#: ../../docs/developers_guide/unittesting.rst:422
msgid ""
"Similarly, you can manually \"white out\" portions of the mask if you "
"deliberately want to exclude them from the test. This can be useful e.g. for"
" tests which mix symbol and text rendering (such as legend tests), where the"
" unit test is not designed to test the rendered text and you don't want the "
"test to be subject to cross-platform text rendering differences."
msgstr ""
"På samma sätt kan du manuellt \"sudda ut\" delar av masken om du medvetet "
"vill utesluta dem från testet. Detta kan vara användbart t.ex. för tester "
"som blandar symbol- och textrendering (t.ex. legendtester), där enhetstestet"
" inte är utformat för att testa den renderade texten och du inte vill att "
"testet ska påverkas av skillnader i textrendering mellan olika plattformar."

#: ../../docs/developers_guide/unittesting.rst:428
msgid ""
"To compare images in QGIS unit tests you should use the class "
"``QgsMultiRenderChecker`` or one of its subclasses."
msgstr ""
"För att jämföra bilder i QGIS enhetstester bör du använda klassen "
"``QgsMultiRenderChecker`` eller en av dess underklasser."

#: ../../docs/developers_guide/unittesting.rst:431
msgid "To improve tests robustness here are few tips:"
msgstr "Här är några tips för att förbättra testernas robusthet:"

#: ../../docs/developers_guide/unittesting.rst:433
msgid ""
"Disable antialiasing if you can, as this minimizes cross-platform rendering "
"differences."
msgstr ""
"Inaktivera antialiasing om du kan, eftersom detta minimerar skillnaderna i "
"rendering mellan olika plattformar."

#: ../../docs/developers_guide/unittesting.rst:435
msgid ""
"Make sure your reference images are \"chunky\"... i.e. don't have 1 px wide "
"lines or other fine features, and use large, bold fonts (14 points or more "
"is recommended)."
msgstr ""
"Se till att dina referensbilder är \"tjocka\"... dvs. inte har 1 px breda "
"linjer eller andra små detaljer, och använd stora, feta teckensnitt (14 "
"punkter eller mer rekommenderas)."

#: ../../docs/developers_guide/unittesting.rst:438
msgid ""
"Sometimes tests generate slightly different sized images (e.g. legend "
"rendering tests, where the image size is dependent on font rendering size - "
"which is subject to cross-platform differences). To account for this, use "
"``QgsMultiRenderChecker::setSizeTolerance()`` and specify the maximum number"
" of pixels that the rendered image width and height differ from the "
"reference image."
msgstr ""
"Ibland genererar tester bilder med något olika storlek (t.ex. test för "
"rendering av teckenförklaringar, där bildstorleken är beroende av "
"teckensnittets renderingsstorlek - som kan variera mellan olika "
"plattformar). För att ta hänsyn till detta kan du använda "
"``QgsMultiRenderChecker::setSizeTolerance()`` och ange det maximala antalet "
"pixlar som den renderade bildens bredd och höjd får skilja sig från "
"referensbilden."

#: ../../docs/developers_guide/unittesting.rst:444
msgid ""
"Don't use transparent backgrounds in reference images (CDash does not "
"support them). Instead, use ``QgsMultiRenderChecker::drawBackground()`` to "
"draw a checkboard pattern for the reference image background."
msgstr ""
"Använd inte transparenta bakgrunder i referensbilder (CDash stöder inte "
"sådana). Använd istället ``QgsMultiRenderChecker::drawBackground()`` för att"
" rita ett rutmönster för referensbildens bakgrund."

#: ../../docs/developers_guide/unittesting.rst:447
msgid ""
"When fonts are required, use the font specified in "
"``QgsFontUtils::standardTestFontFamily()`` (\"QGIS Vera Sans\")."
msgstr ""
"När teckensnitt krävs ska du använda det teckensnitt som anges i "
"``QgsFontUtils::standardTestFontFamily()`` (\"QGIS Vera Sans\")."

#: ../../docs/developers_guide/unittesting.rst:450
msgid ""
"If travis reports errors for new images (for instance due to antialiasing or"
" font differences), the script :source:`parse_dash_results.py "
"<scripts/parse_dash_results.py>` can help you when you are updating the "
"local test masks."
msgstr ""
"Om travis rapporterar fel för nya bilder (t.ex. på grund av skillnader i "
"antialiasing eller teckensnitt) kan skriptet :source:`parse_dash_results.py "
"<scripts/parse_dash_results.py>` hjälpa dig när du uppdaterar de lokala "
"testmaskerna."

#: ../../docs/developers_guide/unittesting.rst:456
msgid "Adding your unit test to CMakeLists.txt"
msgstr "Lägga till ditt enhetstest i CMakeLists.txt"

#: ../../docs/developers_guide/unittesting.rst:459
msgid ""
"Adding your unit test to the build system is simply a matter of editing the "
":file:`CMakeLists.txt` in the test directory, cloning one of the existing "
"test blocks, and then replacing your test class name into it. For example:"
msgstr ""
"Att lägga till ditt enhetstest till byggsystemet är helt enkelt en fråga om "
"att redigera :filen:`CMakeLists.txt` i testkatalogen, klona ett av de "
"befintliga testblocken och sedan ersätta ditt testklassnamn i det. Till "
"exempel:"

#: ../../docs/developers_guide/unittesting.rst:470
msgid "The ADD_QGIS_TEST macro explained"
msgstr "Makrot ADD_QGIS_TEST förklarat"

#: ../../docs/developers_guide/unittesting.rst:472
msgid ""
"We'll run through these lines briefly to explain what they do, but if you "
"are not interested, just do the step explained in the above section."
msgstr ""
"Vi ska kort gå igenom dessa rader för att förklara vad de gör, men om du "
"inte är intresserad kan du bara göra det steg som förklaras i avsnittet "
"ovan."

#: ../../docs/developers_guide/unittesting.rst:507
msgid ""
"Let's look a little more in detail at the individual lines. First we define "
"the list of sources for our test. Since we have only one source file "
"(following the methodology described above where class declaration and "
"definition are in the same file) its a simple statement:"
msgstr ""
"Låt oss titta lite mer i detalj på de enskilda raderna. Först definierar vi "
"listan med källor för vårt test. Eftersom vi bara har en källfil (enligt den"
" metodik som beskrivs ovan där klassdeklaration och definition finns i samma"
" fil) är det ett enkelt uttalande:"

#: ../../docs/developers_guide/unittesting.rst:516
msgid ""
"Since our test class needs to be run through the Qt meta object compiler "
"(moc) we need to provide a couple of lines to make that happen too:"
msgstr ""
"Eftersom vår testklass måste köras genom Qt:s metaobjektkompilator (moc) "
"måste vi också lägga till ett par rader för att det ska ske:"

#: ../../docs/developers_guide/unittesting.rst:525
msgid ""
"Next we tell cmake that it must make an executable from the test class. "
"Remember in the previous section on the last line of the class "
"implementation we included the moc outputs directly into our test class, so "
"that will give it (among other things) a main method so the class can be "
"compiled as an executable:"
msgstr ""
"Därefter talar vi om för cmake att den måste skapa en körbar fil av "
"testklassen. Kom ihåg att vi i föregående avsnitt på den sista raden i "
"klassimplementeringen inkluderade moc-utgångarna direkt i vår testklass, så "
"det kommer att ge den (bland annat) en main-metod så att klassen kan "
"kompileras som en körbar fil:"

#: ../../docs/developers_guide/unittesting.rst:536
msgid ""
"Next we need to specify any library dependencies. At the moment, classes "
"have been implemented with a catch-all QT_LIBRARIES dependency, but we will "
"be working to replace that with the specific Qt libraries that each class "
"needs only. Of course you also need to link to the relevant qgis libraries "
"as required by your unit test."
msgstr ""
"Därefter måste vi specificera eventuella biblioteksberoenden. För närvarande"
" har klasser implementerats med ett övergripande QT_LIBRARIES-beroende, men "
"vi kommer att arbeta för att ersätta det med de specifika Qt-bibliotek som "
"varje klass bara behöver. Naturligtvis måste du också länka till de "
"relevanta qgis-biblioteken som krävs av ditt enhetstest."

#: ../../docs/developers_guide/unittesting.rst:546
msgid ""
"Next we tell cmake to install the tests to the same place as the qgis "
"binaries itself. This is something we plan to remove in the future so that "
"the tests can run directly from inside the source tree."
msgstr ""
"Därefter säger vi till cmake att installera testerna på samma plats som "
"qgis-binärfilerna själva. Detta är något vi planerar att ta bort i framtiden"
" så att testerna kan köras direkt inifrån källträdet."

#: ../../docs/developers_guide/unittesting.rst:573
msgid ""
"Finally the above uses ``ADD_TEST`` to register the test with cmake / ctest."
" Here is where the best magic happens - we register the class with ctest. If"
" you recall in the overview we gave in the beginning of this section, we are"
" using both QtTest and CTest together. To recap, QtTest adds a main method "
"to your test unit and handles calling your test methods within the class. It"
" also provides some macros like ``QVERIFY`` that you can use as to test for "
"failure of the tests using conditions. The output from a QtTest unit test is"
" an executable which you can run from the command line. However when you "
"have a suite of tests and you want to run each executable in turn, and "
"better yet integrate running tests into the build process, the CTest is what"
" we use."
msgstr ""
"Slutligen använder ovanstående ``ADD_TEST`` för att registrera testet med "
"cmake / ctest. Det är här den bästa magin händer - vi registrerar klassen "
"med ctest. Om du minns i den översikt vi gav i början av detta avsnitt "
"använder vi både QtTest och CTest tillsammans. För att sammanfatta, QtTest "
"lägger till en huvudmetod till din testenhet och hanterar anrop av dina "
"testmetoder inom klassen. Det ger också några makron som ``QVERIFY`` som du "
"kan använda för att testa om testerna misslyckas med hjälp av villkor. "
"Utdata från ett QtTest-enhetstest är en körbar fil som du kan köra från "
"kommandoraden. Men när du har en svit med tester och du vill köra varje "
"körbar i tur och ordning, och ännu bättre integrera körtester i "
"byggprocessen, är CTest det vi använder."

#: ../../docs/developers_guide/unittesting.rst:586
msgid "Building your unit test"
msgstr "Bygga ditt enhetstest"

#: ../../docs/developers_guide/unittesting.rst:588
msgid ""
"To build the unit test you need only to make sure that ``ENABLE_TESTS=true``"
" in the cmake configuration. There are two ways to do this:"
msgstr ""
"För att bygga enhetstestet behöver du bara se till att ``ENABLE_TESTS=true``"
" i cmake-konfigurationen. Det finns två sätt att göra detta på:"

#: ../../docs/developers_guide/unittesting.rst:591
msgid ""
"Run ``ccmake ..`` ( or ``cmakesetup ..`` under windows) and interactively "
"set the ``ENABLE_TESTS`` flag to ``ON``."
msgstr ""
"Kör ``ccmake ..`` ( eller ``cmakesetup ..`` under Windows) och sätt "
"interaktivt flaggan ``ENABLE_TESTS`` till ``ON``."

#: ../../docs/developers_guide/unittesting.rst:593
msgid "Add a command line flag to cmake e.g. ``cmake -DENABLE_TESTS=true ..``"
msgstr ""
"Lägg till en kommandoradsflagga till cmake, t.ex. ``cmake "
"-DENABLE_TESTS=true ..```"

#: ../../docs/developers_guide/unittesting.rst:595
msgid ""
"Other than that, just build QGIS as per normal and the tests should build "
"too."
msgstr ""
"Utöver detta är det bara att bygga QGIS som vanligt och testerna bör också "
"byggas."

#: ../../docs/developers_guide/unittesting.rst:599
msgid "Run your tests"
msgstr "Kör dina tester"

#: ../../docs/developers_guide/unittesting.rst:602
msgid ""
"The simplest way to run the tests is as part of your normal build process:"
msgstr ""
"Det enklaste sättet att köra testerna är att göra det som en del av den "
"normala byggprocessen:"

#: ../../docs/developers_guide/unittesting.rst:608
msgid ""
"The ``make test`` command will invoke CTest which will run each test that "
"was registered using the ADD_TEST CMake directive described above. Typical "
"output from ``make test`` will look like this:"
msgstr ""
"Kommandot ``make test`` kommer att anropa CTest som kommer att köra varje "
"test som registrerades med hjälp av ADD_TEST CMake-direktivet som beskrivs "
"ovan. Typisk utdata från ``make test`` kommer att se ut så här:"

#: ../../docs/developers_guide/unittesting.rst:628
msgid ""
"If a test fails, you can use the ctest command to examine more closely why "
"it failed. Use the ``-R`` option to specify a regex for which tests you want"
" to run and ``-V`` to get verbose output:"
msgstr ""
"Om ett test misslyckas kan du använda kommandot ctest för att undersöka "
"närmare varför det misslyckades. Använd alternativet ``-R`` för att ange en "
"regex för vilka tester du vill köra och ``-V`` för att få utförliga utdata:"

#: ../../docs/developers_guide/unittesting.rst:673
msgid "Running individual tests"
msgstr "Körning av enskilda tester"

#: ../../docs/developers_guide/unittesting.rst:675
msgid ""
"C++ tests are ordinary applications. You can run them from the build folder "
"like any executable."
msgstr ""
"C++-tester är vanliga applikationer. Du kan köra dem från build-mappen som "
"vilken körbar fil som helst."

#: ../../docs/developers_guide/unittesting.rst:691
msgid ""
"These tests also take `command line arguments <https://doc.qt.io/qt-5/qtest-"
"overview.html#qt-test-command-line-arguments>`_. This makes it possible to "
"run a specific subset of tests:"
msgstr ""
"Dessa tester tar också `kommandoradsargument <https://doc.qt.io/qt-5/qtest-"
"overview.html#qt-test-command-line-arguments>`_. Detta gör det möjligt att "
"köra en specifik delmängd av testerna:"

#: ../../docs/developers_guide/unittesting.rst:707
msgid "Sandboxing test run"
msgstr "Testkörning med sandlåda"

#: ../../docs/developers_guide/unittesting.rst:709
msgid ""
"By default all test temporary files are written to the system temp directory"
" (for example ``/tmp/`` on Linux systems or ``C:\\temp`` on Windows). A lot "
"of files can be created in this directory during the test run."
msgstr ""
"Som standard skrivs alla temporära testfiler till systemets temp-katalog "
"(t.ex. ``/tmp/`` på Linux-system eller ``C:\\temp`` på Windows). Många filer"
" kan skapas i den här katalogen under testkörningen."

#: ../../docs/developers_guide/unittesting.rst:712
msgid ""
"If you do not want to mix up with the common system temp directory (for "
"example on a multi user server or in case of permission issue), you can "
"create your own temp directory and specify it to ``ctest`` by setting the "
"``TMPDIR`` environment variable with your new directory."
msgstr ""
"Om du inte vill blanda dig med systemets vanliga temp-katalog (t.ex. på en "
"server med flera användare eller vid behörighetsproblem) kan du skapa din "
"egen temp-katalog och ange den för ``ctest`` genom att ange din nya katalog "
"i miljövariabeln ``TMPDIR``."

#: ../../docs/developers_guide/unittesting.rst:715
msgid "On Linux you could do it with:"
msgstr "På Linux kan du göra det med:"

#: ../../docs/developers_guide/unittesting.rst:724
msgid "Debugging unit tests"
msgstr "Felsökning av enhetstester"

#: ../../docs/developers_guide/unittesting.rst:727
msgid "C++ Tests"
msgstr "C++-test"

#: ../../docs/developers_guide/unittesting.rst:729
msgid ""
"For C++ unit tests, QtCreator automatically adds run targets, so you can "
"start them from the debugger."
msgstr ""
"För C++-enhetstester lägger QtCreator automatiskt till körmål så att du kan "
"starta dem från felsökaren."

#: ../../docs/developers_guide/unittesting.rst:732
msgid ""
"If you go to *Projects* and there to the *Build & Run* --> Desktop *Run* "
"tab, you can also specify command line parameters that will allow a subset "
"of the tests to be run inside a .cpp file in the debugger."
msgstr ""
"Om du går till *Projects* och där till fliken *Build & Run* --> Desktop "
"*Run* kan du också ange kommandoradsparametrar som gör att en delmängd av "
"testerna kan köras i en .cpp-fil i debuggern."

#: ../../docs/developers_guide/unittesting.rst:737
msgid "Python Tests"
msgstr "Python-test"

#: ../../docs/developers_guide/unittesting.rst:739
msgid ""
"It's also possible to start Python unit tests from QtCreator with GDB. For "
"this, you need to go to :guilabel:`Projects` and choose :guilabel:`Run` "
"under :guilabel:`Build & Run`. Then add a new ``Run configuration`` with the"
" executable ``/usr/bin/python3`` and the Command line arguments set to the "
"path of the unit test python file, e.g. "
":file:`/home/user/dev/qgis/QGIS/tests/src/python/test_qgsattributeformeditorwidget.py`."
msgstr ""
"Det är också möjligt att starta Python-enhetstester från QtCreator med GDB. "
"För detta måste du gå till :guilabel:`Projects` och välja :guilabel:`Run` "
"under :guilabel:`Build & Run`. Lägg sedan till en ny ``Run configuration`` "
"med den körbara ``/usr/bin/python3`` och kommandoradsargumenten inställda på"
" sökvägen till enhetstestets pythonfil, t.ex. "
":file:`/home/user/dev/qgis/QGIS/tests/src/python/test_qgsattributeformeditorwidget.py`."

#: ../../docs/developers_guide/unittesting.rst:747
msgid "Now also change the ``Run Environment`` and add 3 new variables:"
msgstr "Ändra nu också ``Run Environment`` och lägg till 3 nya variabler:"

#: ../../docs/developers_guide/unittesting.rst:750
msgid "Variable"
msgstr "Variable"

#: ../../docs/developers_guide/unittesting.rst:750
msgid "Value"
msgstr "Värde"

#: ../../docs/developers_guide/unittesting.rst:752
msgid "PYTHONPATH"
msgstr "PYTHONPATH"

#: ../../docs/developers_guide/unittesting.rst:752
msgid ""
"[build]/output/python/:[build]/output/python/plugins:[source]/tests/src/python"
msgstr ""
"[build]/output/python/:[build]/output/python/plugins:[source]/tests/src/python"

#: ../../docs/developers_guide/unittesting.rst:754
msgid "QGIS_PREFIX_PATH"
msgstr "QGIS_PREFIX_PATH"

#: ../../docs/developers_guide/unittesting.rst:754
msgid "[build]/output"
msgstr "[build]/output"

#: ../../docs/developers_guide/unittesting.rst:756
msgid "LD_LIBRARY_PATH"
msgstr "LD_LIBRARY_PATH"

#: ../../docs/developers_guide/unittesting.rst:756
msgid "[build]/output/lib"
msgstr "[build]/output/lib"

#: ../../docs/developers_guide/unittesting.rst:759
msgid ""
"Replace ``[build]`` with your build directory and ``[source]`` with your "
"source directory."
msgstr ""
"Ersätt ``[build]`` med din byggkatalog och ``[source]`` med din källkatalog."

#: ../../docs/developers_guide/unittesting.rst:763
msgid "Have fun"
msgstr "Ha kul"

#: ../../docs/developers_guide/unittesting.rst:765
msgid ""
"Well that concludes this section on writing unit tests in QGIS. We hope you "
"will get into the habit of writing tests to test new functionality and to "
"check for regressions. Some aspects of the test system (in particular the "
":file:`CMakeLists.txt` parts) are still being worked on so that the testing "
"framework works in a truly platform independent way."
msgstr ""
"Det avslutar detta avsnitt om att skriva enhetstester i QGIS. Vi hoppas att "
"du kommer att ta för vana att skriva tester för att testa ny funktionalitet "
"och för att kontrollera regressioner. Vissa aspekter av testsystemet (i "
"synnerhet :file:`CMakeLists.txt`-delarna) håller fortfarande på att "
"bearbetas så att testramverket fungerar på ett verkligt plattformsoberoende "
"sätt."
